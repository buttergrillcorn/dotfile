#+TITLE: Dotfiles Configuration
#+AUTHOR: James
#+PROPERTY: header-args :mkdirp yes :noweb yes
#+STARTUP: overview

* Shared Configuration

** Colours
#+name: colours
#+begin_src conf
# Fallback color scheme (Tokyo Night inspired)
set $bg #1a1b26
set $fg #c0caf5
set $accent #7aa2f7
set $urgent #f7768e
set $primary #7aa2f7
set $on_primary #1a1b26
set $primary_container #3d59a1
set $on_primary_container #c0caf5
set $secondary #9d7cd8
set $on_secondary #1a1b26
set $surface #1a1b26
set $on_surface #c0caf5
set $surface_variant #292e42
set $on_surface_variant #a9b1d6
set $surface_dim #16161e
set $error #f7768e
set $on_error #1a1b26
#+end_src

** Variables
#+name: terminal
#+begin_src text
foot
#+end_src

#+name: font
#+begin_src text
JetBrainsMono Nerd Font
#+end_src

#+name: font-serif
#+begin_src text
Noto Serif CJK SC
#+end_src

#+name: font-sans
#+begin_src text
Noto Sans CJK SC
#+end_src

#+name: wallpaper
#+begin_src text
~/dotfile/wallpapers/default.jpg
#+end_src

* Sway

** Variables
#+begin_src conf :tangle packages/sway/.config/sway/config
set $mod Mod4
set $term <<terminal>>

# Fallback colors (defined first, will be overridden by matugen)
<<colors>>

# Source matugen colors if available (overrides fallback)
include /home/james/.cache/matugen/colors-sway
#+end_src

** Input Configuration
#+begin_src conf :tangle packages/sway/.config/sway/config
input type:keyboard {
    xkb_layout us
    xkb_options ctrl:swapcaps
}

input type:touchpad {
    tap enabled
    natural_scroll enabled
    scroll_factor 0.7
    accel_profile adaptive
    middle_emulation enabled
    dwt enabled
}

input type:pointer {
    dwt enabled
}
#+end_src

** Output Configuration
#+begin_src conf :tangle packages/sway/.config/sway/config
output eDP-1 mode 1920x1080@60Hz position 0,0
#+end_src

** Appearance
#+begin_src conf :tangle packages/sway/.config/sway/config
gaps inner 5
gaps outer 0

default_border normal 3
default_floating_border normal 3

# Title bar format showing window info
title_align center
for_window [all] title_format "%title"
titlebar_padding 5 2

# Window colors: border, background, text, indicator, child_border
# The indicator (4th value) shows where new windows will appear
# The child_border (5th value) is the actual border color you see
client.focused $primary $primary $on_primary $accent $primary
client.focused_inactive $surface_variant $surface_variant $on_surface_variant $surface_dim $surface_variant
client.focused_tab_title $primary $primary $on_primary $primary $primary
client.unfocused $surface_dim $surface_dim $on_surface $surface_dim $surface_dim
client.urgent $error $error $on_error $error $error
client.placeholder $surface_dim $surface_dim $on_surface $surface_dim $surface_dim
#+end_src

** Behaviour
#+begin_src conf :tangle packages/sway/.config/sway/config
# Focus follows mouse
focus_follows_mouse yes
focus_wrapping workspace

# Don't auto-focus certain windows
no_focus [window_type="notification"]
no_focus [title="Picture-in-Picture"]

# Mouse bindings - Mod+drag to move, Mod+right-drag to resize
floating_modifier $mod normal
#+end_src

** Window Rules
#+begin_src conf :tangle packages/sway/.config/sway/config
# Picture-in-Picture windows
for_window [title="Picture-in-Picture"] floating enable, border none, move position 10 ppt 10 ppt, sticky enable

# Floating scratchpad terminal
for_window [app_id="floating-foot"] floating enable, resize set 50 ppt 50 ppt, move position center, move scratchpad, scratchpad show

# Floating applications
for_window [app_id="blueberry.py"] floating enable
for_window [app_id="blueman-manager"] floating enable
for_window [app_id="pavucontrol"] floating enable
for_window [app_id="fcitx5-config-qt"] floating enable
for_window [class="Bitwarden"] floating enable
for_window [app_id="LanMouse"] floating enable
for_window [app_id="org.kde.kdeconnect.*"] floating enable
for_window [class="prismlauncher"] floating enable
for_window [app_id="nm-connection-editor"] floating enable
#+end_src

** Auto-start
#+begin_src conf :tangle packages/sway/.config/sway/config
# Wayland essentials
exec swaybg -i <<wallpaper>> -m fill
exec mako
exec waybar

# System utilities
exec fcitx5
exec light -N 5
exec wlsunset -l 51.5 -L 0.1
exec ~/.local/bin/start-swayidle.sh

# Tiling enhancements
exec_always autotiling

# User applications
exec udiskie
exec wluma
exec kdeconnectd
exec kdeconnect-indicator
#+end_src

** Keybindings - Launch Programs
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym $mod+Return exec $term
bindsym $mod+Shift+Return exec $term --app-id=floating-foot
bindsym $mod+d exec fuzzel
bindsym $mod+b exec qutebrowser
bindsym $mod+Shift+b exec ~/.local/bin/bitwarden-fuzzel
bindsym $mod+y exec $term -e yazi
bindsym $mod+n exec emacsclient -c
bindsym $mod+Shift+n exec emacs
bindsym $mod+p exec ~/.local/bin/select-wallpaper.sh
#+end_src

** Keybindings - Window Management
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym $mod+q kill
bindsym $mod+Shift+Ctrl+f fullscreen toggle
bindsym $mod+Shift+f fullscreen toggle global
bindsym $mod+f floating toggle
bindsym $mod+Tab focus mode_toggle
bindsym $mod+Alt+s sticky toggle

# Layout modes (i3 standard)
bindsym $mod+w layout tabbed
bindsym $mod+s layout stacking
bindsym $mod+e layout toggle split
bindsym $mod+t layout toggle all

# Split directions
bindsym $mod+v split vertical
bindsym $mod+minus split horizontal
#+end_src

** Keybindings - Navigation
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right
#+end_src
** Keybindings - Moving Windows
#+begin_src conf :tangle packages/sway/.config/sway/config
# Move window in direction (i3 standard)
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Move window to output
bindsym $mod+Ctrl+Shift+h move output left
bindsym $mod+Ctrl+Shift+j move output down
bindsym $mod+Ctrl+Shift+k move output up
bindsym $mod+Ctrl+Shift+l move output right
bindsym $mod+Ctrl+Shift+Left move output left
bindsym $mod+Ctrl+Shift+Down move output down
bindsym $mod+Ctrl+Shift+Up move output up
bindsym $mod+Ctrl+Shift+Right move output right
#+end_src

** Keybindings - Window Swapping (Disabled)
# This section contains alternative window swapping keybindings that were replaced
# by the simpler move keybindings in the previous section. Kept here for reference.
#+begin_src conf :tangle no
# Swap windows in direction (Hyprland-like behavior)
bindsym $mod+Ctrl+h mark --add _swap, focus left, swap container with mark _swap, unmark _swap, focus left
bindsym $mod+Ctrl+j mark --add _swap, focus down, swap container with mark _swap, unmark _swap, focus down
bindsym $mod+Ctrl+k mark --add _swap, focus up, swap container with mark _swap, unmark _swap, focus up
bindsym $mod+Ctrl+l mark --add _swap, focus right, swap container with mark _swap, unmark _swap, focus right
bindsym $mod+Ctrl+Left mark --add _swap, focus left, swap container with mark _swap, unmark _swap, focus left
bindsym $mod+Ctrl+Down mark --add _swap, focus down, swap container with mark _swap, unmark _swap, focus down
bindsym $mod+Ctrl+Up mark --add _swap, focus up, swap container with mark _swap, unmark _swap, focus up
bindsym $mod+Ctrl+Right mark --add _swap, focus right, swap container with mark _swap, unmark _swap, focus right

# Move window to output
bindsym $mod+Ctrl+Shift+h move output left
bindsym $mod+Ctrl+Shift+j move output down
bindsym $mod+Ctrl+Shift+k move output up
bindsym $mod+Ctrl+Shift+l move output right
bindsym $mod+Ctrl+Shift+Left move output left
bindsym $mod+Ctrl+Shift+Down move output down
bindsym $mod+Ctrl+Shift+Up move output up
bindsym $mod+Ctrl+Shift+Right move output right
#+end_src

** Keybindings - Workspaces
#+begin_src conf :tangle packages/sway/.config/sway/config
# Switch to workspace
bindsym $mod+1 workspace number 1
bindsym $mod+2 workspace number 2
bindsym $mod+3 workspace number 3
bindsym $mod+4 workspace number 4
bindsym $mod+5 workspace number 5
bindsym $mod+6 workspace number 6
bindsym $mod+7 workspace number 7
bindsym $mod+8 workspace number 8
bindsym $mod+9 workspace number 9

# Move to workspace (without switching)
bindsym $mod+Shift+1 move container to workspace number 1
bindsym $mod+Shift+2 move container to workspace number 2
bindsym $mod+Shift+3 move container to workspace number 3
bindsym $mod+Shift+4 move container to workspace number 4
bindsym $mod+Shift+5 move container to workspace number 5
bindsym $mod+Shift+6 move container to workspace number 6
bindsym $mod+Shift+7 move container to workspace number 7
bindsym $mod+Shift+8 move container to workspace number 8
bindsym $mod+Shift+9 move container to workspace number 9

# Move to workspace and switch
bindsym $mod+Ctrl+1 move container to workspace number 1; workspace number 1
bindsym $mod+Ctrl+2 move container to workspace number 2; workspace number 2
bindsym $mod+Ctrl+3 move container to workspace number 3; workspace number 3
bindsym $mod+Ctrl+4 move container to workspace number 4; workspace number 4
bindsym $mod+Ctrl+5 move container to workspace number 5; workspace number 5
bindsym $mod+Ctrl+6 move container to workspace number 6; workspace number 6
bindsym $mod+Ctrl+7 move container to workspace number 7; workspace number 7
bindsym $mod+Ctrl+8 move container to workspace number 8; workspace number 8
bindsym $mod+Ctrl+9 move container to workspace number 9; workspace number 9

# Scratchpad
bindsym $mod+grave scratchpad show
bindsym $mod+Shift+grave move scratchpad
#+end_src

** Keybindings - Hardware
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym XF86AudioRaiseVolume exec pamixer -i 5
bindsym XF86AudioLowerVolume exec pamixer -d 5
bindsym XF86AudioMute exec pamixer -t
bindsym XF86AudioMicMute exec pamixer --default-source -t

bindsym XF86MonBrightnessUp exec light -A 5
bindsym XF86MonBrightnessDown exec light -U 5

# Screenshot with fuzzel menu
bindsym Print exec ~/.local/bin/screenshot.sh
bindsym $mod+Shift+s exec ~/.local/bin/screenshot.sh

# Quick screenshot (full screen, copy & save)
bindsym Shift+Print exec ~/.local/bin/screenshot.sh screen
bindsym $mod+Shift+Ctrl+s exec ~/.local/bin/screenshot.sh screen
#+end_src

** Keybindings - Notifications
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym $mod+m exec makoctl invoke
bindsym $mod+Ctrl+m exec makoctl dismiss
bindsym $mod+Shift+m exec makoctl menu fuzzel
#+end_src

** Keybindings - Utilities
#+begin_src conf :tangle packages/sway/.config/sway/config
# Lock screen
bindsym $mod+Escape exec rm -f ${XDG_RUNTIME_DIR:-/tmp}/bw_session ${XDG_RUNTIME_DIR:-/tmp}/bw_cache && swaylock

# Clipboard history
bindsym $mod+Shift+v exec cliphist list | fuzzel --dmenu | cliphist decode | wl-copy
#+end_src

** Keybindings - Resizing
#+begin_src conf :tangle packages/sway/.config/sway/config
# Resize mode (use Mod+r to enter)
mode "resize" {
    bindsym h resize shrink width 15px
    bindsym j resize grow height 15px
    bindsym k resize shrink height 15px
    bindsym l resize grow width 15px

    bindsym Left resize shrink width 15px
    bindsym Down resize grow height 15px
    bindsym Up resize shrink height 15px
    bindsym Right resize grow width 15px

    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"
#+end_src

** Keybindings - Gestures
#+begin_src conf :tangle packages/sway/.config/sway/config
# Workspace navigation
bindgesture swipe:3:right workspace prev
bindgesture swipe:3:left workspace next

# Scratchpad (down gesture)
bindgesture swipe:3:down scratchpad show
#+end_src

** Keybindings - System
#+begin_src conf :tangle packages/sway/.config/sway/config
bindsym $mod+Shift+c reload; exec sh -c 'pkill waybar; pkill mako; sleep 0.2; waybar & mako & notify-send "Sway" "Configuration reloaded successfully" -u low'
bindsym $mod+Shift+q exec swaynag -t warning -m 'Exit sway?' -B 'Yes' 'swaymsg exit'
#+end_src

** Lid Switch
#+begin_src conf :tangle packages/sway/.config/sway/config
# Lid close: turn off screen, lock, and sleep
bindswitch --reload --locked lid:on exec 'swaymsg "output * dpms off" && swaylock && systemctl suspend'

# Lid open: wake screen
bindswitch --reload --locked lid:off exec 'swaymsg "output * dpms on"'
#+end_src

* Hyprland

** Variables
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Hyprland Configuration
# See https://wiki.hypr.land/ for more

$mainMod = SUPER
$terminal = foot
$menu = fuzzel
$browser = qutebrowser
$fileManager = foot -e yazi
#+end_src

** Source Matugen Colours
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Source Material You colors from matugen
source = ~/.cache/matugen/colors-hyprland.conf
#+end_src

** Monitor Configuration
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Monitor configuration
monitor = eDP-1, 1920x1080@60, 0x0, 1
#+end_src

** Auto-start Programs
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Execute on launch
exec-once = waybar
exec-once = mako
exec-once = hyprpaper
exec-once = hypridle
exec-once = fcitx5
exec-once = light -N 5
exec-once = hyprsunset
exec-once = udiskie
exec-once = wluma
exec-once = kdeconnectd
exec-once = kdeconnect-indicator
exec-once = systemctl --user start hyprpolkitagent
exec-once = wl-paste --type text --watch cliphist store
exec-once = wl-paste --type image --watch cliphist store
#+end_src

** Environment Variables
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Environment variables
env = XCURSOR_SIZE,24
env = XCURSOR_THEME,human
env = HYPRCURSOR_SIZE,24
#+end_src

** Input Configuration
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
input {
    kb_layout = us
    kb_options = ctrl:swapcaps

    follow_mouse = 1
    float_switch_override_focus = 1

    touchpad {
        disable_while_typing = true
        natural_scroll = true
        scroll_factor = 0.7
        middle_button_emulation = true
    }

    sensitivity = 0
}
#+end_src

** General Settings
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
general {
    border_size = 3

    gaps_in = 3
    gaps_out = 5

    layout = dwindle
    allow_tearing = false
    resize_on_border = true
    hover_icon_on_border = true

    snap {
        enabled = true
    }
}
#+end_src
** Decoration
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
decoration {
    rounding = 0

    active_opacity = 0.98
    inactive_opacity = 0.8

    dim_modal = false
    dim_special = 0.3

    blur {
        enabled = true
        special = true
        popups = true
        size = 6
        passes = 1
        noise = 0.1
    }

    shadow {
        enabled = false
    }
}
#+end_src
** Group Settings
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
group {
    groupbar {
        render_titles = false
        font_family = "<<font>>"
        font_size = 12
        rounding = 0
        indicator_height = 6
        gaps_in = 2
        gaps_out = 3
        keep_upper_gap = false
    }
}
#+end_src
** Colours
These will be set by Matugen
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
general {
    col.active_border = $primary
    col.inactive_border = $background
}

group {
    col.border_active = $secondary
    col.border_inactive = $secondary_container
    col.border_locked_active = $tertiary
    col.border_locked_inactive = $tertiary_container

    groupbar {
        text_color = $on_secondary
        text_color_inactive = $on_primary_container
        col.active = $secondary
        col.inactive = $secondary_container
        col.locked_active = $tertiary
        col.locked_inactive = $tertiary_container
    }
}
#+end_src
** Animations (Minimal/Fast)
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
animations {
    enabled = true

    # Fast bezier curve for minimal animations
    bezier = fastCurve, 0.4, 0.0, 0.2, 1.0

    animation = windows, 1, 3, fastCurve
    animation = windowsOut, 1, 3, fastCurve, popin 90%
    animation = border, 1, 5, default
    animation = fade, 1, 3, default
    animation = workspaces, 1, 3, fastCurve, slide
}
#+end_src

** Layouts
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
dwindle {
    # pseudotile = true
    # preserve_split = false
    # smart_split = false
    # smart_resizing = true
}

master {
}
#+end_src
** Gesture Settings
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
gestures {
}
#+end_src
** Misc Settings
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
misc {
    force_default_wallpaper = 0
    disable_hyprland_logo = true
    disable_splash_rendering = true
    mouse_move_enables_dpms = true
    key_press_enables_dpms = true
    vrr = 0
}

ecosystem {
    no_donation_nag = true
}
#+end_src

** Window Rules
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Floating terminal
windowrulev2 = float, class:(floating-foot)
windowrulev2 = size 50% 50%, class:(floating-foot)
windowrulev2 = center, class:(floating-foot)

# Picture-in-Picture
windowrulev2 = float, title:^(Picture-in-Picture)$
windowrulev2 = pin, title:^(Picture-in-Picture)$
windowrulev2 = move 100%-w-20 100%-h-20, title:^(Picture-in-Picture)$
windowrulev2 = size 25% 25%, title:^(Picture-in-Picture)$
windowrulev2 = noborder, title:^(Picture-in-Picture)$

# Floating windows
windowrulev2 = float, class:(blueman-manager)
windowrulev2 = float, class:(pavucontrol)
windowrulev2 = float, class:(Wiremix)
windowrulev2 = size 50% 50%, class:(Wiremix)
windowrulev2 = center, class:(Wiremix)
windowrulev2 = float, class:(nm-connection-editor)
windowrulev2 = float, class:(kdeconnect.*)
windowrulev2 = float, title:(Volume Control)
windowrulev2 = float, class:(blueberry.py)

# Inhibit idle for fullscreen
windowrulev2 = idleinhibit fullscreen, class:.*

# No focus stealing
windowrulev2 = noinitialfocus, class:(mako)
windowrulev2 = noinitialfocus, title:^(Picture-in-Picture)$
#+end_src

** Workspace Rules
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
workspace = s[true], gapsin:10, gapsout:30
#+end_src
** Keybindings - Applications
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Applications
bind = $mainMod, Return, exec, $terminal
bind = $mainMod SHIFT, Return, exec, [workspace special:scratchpad] $terminal
bind = $mainMod, D, exec, $menu
bind = $mainMod, B, exec, $browser
bind = $mainMod SHIFT, B, exec, ~/.local/bin/bitwarden-fuzzel
bind = $mainMod, E, exec, $fileManager
bind = $mainMod, N, exec, emacsclient -c
bind = $mainMod SHIFT, N, exec, emacs
bind = $mainMod SHIFT, P, exec, ~/.local/bin/select-wallpaper.sh
#+end_src

** Keybindings - Window Management
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Window management
bind = $mainMod, Q, killactive
bind = $mainMod CTRL, F, fullscreen, 0
bind = $mainMod SHIFT, F, fullscreen, 1
bind = $mainMod, F, togglefloating
bind = $mainMod, Tab, focuscurrentorlast
bind = $mainMod ALT, S, pin

# Layout modes
bind = $mainMod, G, togglegroup
bind = $mainMod SHIFT, G, moveoutofgroup
bind = $mainMod CTRL, G, lockactivegroup, toggle
bind = $mainMod, S, changegroupactive, f
bind = $mainMod, T, cyclenext

# Pseudo-tiling
bind = $mainMod, P, pseudo
#+end_src

** Keybindings - Navigation
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Focus windows
bind = $mainMod, H, movefocus, l
bind = $mainMod, J, movefocus, d
bind = $mainMod, K, movefocus, u
bind = $mainMod, L, movefocus, r
bind = $mainMod, Left, movefocus, l
bind = $mainMod, Down, movefocus, d
bind = $mainMod, Up, movefocus, u
bind = $mainMod, Right, movefocus, r
#+end_src

** Keybindings - Moving Windows
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Move windows
bind = $mainMod SHIFT, H, movewindow, l
bind = $mainMod SHIFT, J, movewindow, d
bind = $mainMod SHIFT, K, movewindow, u
bind = $mainMod SHIFT, L, movewindow, r
bind = $mainMod SHIFT, Left, movewindow, l
bind = $mainMod SHIFT, Down, movewindow, d
bind = $mainMod SHIFT, Up, movewindow, u
bind = $mainMod SHIFT, Right, movewindow, r

bind = $mainMod CTRL, H, movewindoworgroup, l
bind = $mainMod CTRL, J, movewindoworgroup, d
bind = $mainMod CTRL, K, movewindoworgroup, u
bind = $mainMod CTRL, L, movewindoworgroup, r
bind = $mainMod CTRL, Left, movewindoworgroup, l
bind = $mainMod CTRL, Down, movewindoworgroup, d
bind = $mainMod CTRL, Up, movewindoworgroup, u
bind = $mainMod CTRL, Right, movewindoworgroup, r

# Move window to output
bind = $mainMod CTRL SHIFT, H, movewindow, mon:l
bind = $mainMod CTRL SHIFT, J, movewindow, mon:d
bind = $mainMod CTRL SHIFT, K, movewindow, mon:u
bind = $mainMod CTRL SHIFT, L, movewindow, mon:r
#+end_src

** Keybindings - Workspaces
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Switch workspaces
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9

# Move to workspace (without switching)
bind = $mainMod SHIFT, 1, movetoworkspacesilent, 1
bind = $mainMod SHIFT, 2, movetoworkspacesilent, 2
bind = $mainMod SHIFT, 3, movetoworkspacesilent, 3
bind = $mainMod SHIFT, 4, movetoworkspacesilent, 4
bind = $mainMod SHIFT, 5, movetoworkspacesilent, 5
bind = $mainMod SHIFT, 6, movetoworkspacesilent, 6
bind = $mainMod SHIFT, 7, movetoworkspacesilent, 7
bind = $mainMod SHIFT, 8, movetoworkspacesilent, 8
bind = $mainMod SHIFT, 9, movetoworkspacesilent, 9

# Move to workspace and switch
bind = $mainMod CTRL, 1, movetoworkspace, 1
bind = $mainMod CTRL, 2, movetoworkspace, 2
bind = $mainMod CTRL, 3, movetoworkspace, 3
bind = $mainMod CTRL, 4, movetoworkspace, 4
bind = $mainMod CTRL, 5, movetoworkspace, 5
bind = $mainMod CTRL, 6, movetoworkspace, 6
bind = $mainMod CTRL, 7, movetoworkspace, 7
bind = $mainMod CTRL, 8, movetoworkspace, 8
bind = $mainMod CTRL, 9, movetoworkspace, 9

# Special workspace (scratchpad replacement)
bind = $mainMod, w, togglespecialworkspace, scratchpad
bind = $mainMod SHIFT, w, movetoworkspace, special:scratchpad
#+end_src

** Keybindings - Hardware
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Volume controls
bind = , XF86AudioRaiseVolume, exec, pamixer -i 5
bind = , XF86AudioLowerVolume, exec, pamixer -d 5
bind = , XF86AudioMute, exec, pamixer -t
bind = , XF86AudioMicMute, exec, pamixer --default-source -t

# Brightness controls
bind = , XF86MonBrightnessUp, exec, light -A 5
bind = , XF86MonBrightnessDown, exec, light -U 5

# Screenshots
bind = , Print, exec, ~/.local/bin/screenshot.sh
bind = $mainMod SHIFT, S, exec, ~/.local/bin/screenshot.sh
bind = SHIFT, Print, exec, ~/.local/bin/screenshot.sh screen
bind = $mainMod SHIFT CTRL, S, exec, ~/.local/bin/screenshot.sh screen

# Laptop Lid
bindl = , switch:on:[Lid Switch], exec, hyprlock && systemctl suspend
#+end_src

** Keybindings - Utilities
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Lock screen (clears Bitwarden session and cache before locking)
bind = $mainMod, Escape, exec, rm -f ${XDG_RUNTIME_DIR:-/tmp}/bw_session ${XDG_RUNTIME_DIR:-/tmp}/bw_cache && loginctl lock-session

# Notifications
bind = $mainMod, M, exec, makoctl restore
bind = $mainMod CTRL, M, exec, makoctl dismiss
bind = $mainMod SHIFT, M, exec, ~/.local/bin/mako-actions
bind = $mainMod CTRL SHIFT, M, exec, makoctl list

# Network manager
bind = $mainMod, I, exec, networkmanager_dmenu

# Clipboard manager
bind = $mainMod SHIFT, V, exec, cliphist list | fuzzel --dmenu --width 50 --placeholder "Search in clipboard" | cliphist decode | wl-copy
bind = $mainMod CTRL SHIFT, V, exec, cliphist wipe | notify-send "Cliboard" "Clipboard history has been cleared."
#+end_src

** Keybindings - Resizing
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Resize mode
bind = $mainMod, R, submap, resize
submap = resize

binde = , H, resizeactive, -15 0
binde = , J, resizeactive, 0 15
binde = , K, resizeactive, 0 -15
binde = , L, resizeactive, 15 0
binde = , Left, resizeactive, -15 0
binde = , Down, resizeactive, 0 15
binde = , Up, resizeactive, 0 -15
binde = , Right, resizeactive, 15 0

bind = , Return, submap, reset
bind = , Escape, submap, reset

submap = reset
#+end_src

** Keybindings - Gestures
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
gesture = 3, horizontal, workspace
#+end_src

** Keybindings - System
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# System controls
bind = $mainMod SHIFT, C, exec, hyprctl reload && pkill waybar && pkill mako && sleep 0.2 && waybar & mako & notify-send "Hyprland" "Configuration reloaded successfully" -u low
bind = $mainMod SHIFT, Q, exit
bind = $mainMod SHIFT, R, exec, ~/dotfile/scripts/tangle.sh & notify-send "Dotfiles" "Dotfiles tangled successfully!"
#+end_src

** Keybindings - Mouse
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprland.conf
# Mouse bindings
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
bindm = $mainMod, z, resizewindow
#+end_src

* Hyprpaper
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprpaper.conf
# Hyprpaper Configuration
# Wallpaper daemon for Hyprland

preload = <<wallpaper>>
wallpaper = , <<wallpaper>>

splash = false
ipc = on
#+end_src

* Hypridle
#+begin_src conf :tangle packages/hyprland/.config/hypr/hypridle.conf
# Hypridle Configuration
# Idle management daemon for Hyprland

general {
    lock_cmd = pidof hyprlock || hyprlock
    before_sleep_cmd = loginctl lock-session && rm -f ${XDG_RUNTIME_DIR:-/tmp}/bw_session ${XDG_RUNTIME_DIR:-/tmp}/bw_cache
    after_sleep_cmd = hyprctl dispatch dpms on
    ignore_dbus_inhibit = false
}

# Screen off (5 minutes on battery, 10 minutes on AC)
listener {
    timeout = 300
    on-timeout = hyprctl dispatch dpms off
    on-resume = hyprctl dispatch dpms on
}

# Lock screen (10 minutes on battery, 15 minutes on AC)
listener {
    timeout = 600
    on-timeout = loginctl lock-session && rm -f ${XDG_RUNTIME_DIR:-/tmp}/bw_session ${XDG_RUNTIME_DIR:-/tmp}/bw_cache
}

# Suspend (30 minutes on battery, 60 minutes on AC)
listener {
    timeout = 1800
    on-timeout = systemctl suspend
}
#+end_src

* Hyprlock
#+begin_src conf :tangle packages/hyprland/.config/hypr/hyprlock.conf
# Hyprlock Configuration
# Screen lock for Hyprland

# Source Material You colors
source = ~/.cache/matugen/colors-hyprlock.conf

general {
    disable_loading_bar = false
    hide_cursor = true
    grace = 0
    no_fade_in = false
    no_fade_out = false
    ignore_empty_input = false
    immediate_render = false
}

background {
    monitor =
    path = screenshot
    blur_passes = 3
    blur_size = 6
    noise = 0.0117
    contrast = 0.8916
    brightness = 0.8172
    vibrancy = 0.1696
    vibrancy_darkness = 0.0
}

input-field {
    monitor =
    size = 100, 35
    dots_size = 0.35
    dots_spacing = 0.5
    dots_rounding = 0

    outer_color = $primary
    inner_color = $surface
    font_color = $on_surface

    fade_on_empty = false

    placeholder_text =
    hide_input = false

    rounding = 0
    check_color = $tertiary
    fail_color = $error
    fail_text = Authentication Failed

    halign = center
    valign = center
}
#+end_src

* Waybar (Hyprland)

** Configuration
#+begin_src json :tangle packages/hyprland/.config/waybar/config
{
    "reload_style_on_change": true,
    "layer": "top",
    "position": "top",
    "height": 30,
    "spacing": 0,
    "margin-top": 0,
    "margin-bottom": 0,
    "margin-left": 0,
    "margin-right": 0,

    "modules-left": ["idle_inhibitor", "hyprland/workspaces", "privacy"],

    "modules-center": ["custom/pomodoro", "clock", "custom/update"],

    "modules-right": [
        "group/tray-expander",
        "cpu",
        "memory",
        "bluetooth",
        "network",
        "pulseaudio",
        "backlight",
        "custom/battery"
    ],

    "idle_inhibitor": {
        "format": "{icon}",
        "format-icons": {
            "activated": "󰅶",
            "deactivated": "󰾪"
        },
        "tooltip-format-activated": "Idle Inhibitor: Active",
        "tooltip-format-deactivated": "Idle Inhibitor: Inactive"
    },

    "hyprland/workspaces": {
        "on-click": "activate",
        "show-special": true,
        "format": "{icon}",
        "format-icons": {
            "default": "",
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "6": "6",
            "7": "7",
            "8": "8",
            "9": "9",
            "active": "",
            "urgent": "",
            "special": ""
        },
        "persistent-workspaces": {
            "1": [],
            "2": [],
            "3": [],
            "4": [],
            "5": [],
            "6": [],
            "7": [],
            "8": [],
            "9": []
        }
    },

    "privacy": {
        "icon-spacing": 20,
        "icon-size": 10,
        "transition-duration": 250,
        "modules": [
            {
                "type": "screenshare",
                "tooltip": true,
                "tooltip-icon-size": 18
            },
            {
                "type": "audio-in",
                "tooltip": true,
                "tooltip-icon-size": 18
            },
            {
                "type": "audio-out",
                "tooltip": true,
                "tooltip-icon-size": 18
            }
        ]
    },

    "custom/pomodoro": {
        "format": "{alt} {text}",
        "exec": "~/.local/bin/waybar-pomodoro",
        "return-type": "json",
        "interval": 1,
        "on-click": "~/.local/bin/waybar-pomodoro toggle",
        "on-click-right": "~/.local/bin/waybar-pomodoro reset"
    },

    "clock": {
        "format": "{:L%A %H:%M}",
        "format-alt": "{:L%d %B W%V %Y}",
        "tooltip-format": "<tt>{calendar}</tt>",
        "calendar": {
            "mode": "month",
            "mode-mon-col": 3,
            "weeks-pos": "left",
            "on-scroll": 1,
            "on-click-right": "mode"
            // "format": {
            //   "months": "<span color='#f7768e'><b>{}</b></span>",
            //   "days": "<span color='#c0caf5'><b>{}</b></span>",
            //   "weeks": "<span color='#9ece6a'>W{}</span>",
            //   "weekdays": "<span color='#7aa2f7'>{}</span>",
            //   "today": "<span color='#ff9e64'><b><u>{}</u></b></span>"
            // }
        },
        "actions": {
            "on-click-right": "mode",
            "on-scroll-up": "shift_up",
            "on-scroll-down": "shift_down"
        }
    },

    "custom/update": {
        "format": "{}",
        "exec": "~/.local/bin/waybar-updates",
        "on-click": "foot --app-id=floating-foot -e sh -c 'yay -Syu && echo && echo Done! Press Enter to close && read'",
        "return-type": "json",
        "interval": 3600,
        "signal": 7
    },

    "cpu": {
        "interval": 5,
        "format": "󰍛",
        "tooltip-format": "CPU: {usage}%",
        "on-click": "foot --app-id=floating-foot -e btop"
    },

    "memory": {
        "interval": 5,
        "format": "󰘚",
        "tooltip-format": "RAM: {used:0.1f}G / {total:0.1f}G ({percentage}%)",
        "on-click": "foot --app-id=floating-foot -e btop"
    },

    "network": {
        "format-icons": ["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"],
        "format": "{icon}",
        "format-wifi": "{icon}",
        "format-ethernet": "󰀂",
        "format-disconnected": "󰤮",
        "tooltip-format-wifi": "{essid} ({frequency} GHz)\n⇣{bandwidthDownBytes}  ⇡{bandwidthUpBytes}",
        "tooltip-format-ethernet": "Wired\n⇣{bandwidthDownBytes}  ⇡{bandwidthUpBytes}",
        "tooltip-format-disconnected": "Disconnected",
        "interval": 3,
        "on-click": "networkmanager_dmenu"
    },

    "bluetooth": {
        "format": "",
        "format-disabled": "󰂲",
        "format-connected": "",
        // "format-connected-battery": "{icon}",
        // "format-icons": {
        //     "connected-battery": ["󰤾", "󰤿", "󰥀", "󰥁", "󰥂", "󰥃", "󰥄", "󰥅", "󰥆", "󰥈" ]
        // },
        "tooltip-format": "Bluetooth: {num_connections} connected",
        "on-click": "blueman-manager"
    },

    "pulseaudio": {
        "format": "{icon}",
        "format-muted": "",
        "format-icons": {
            "default": ["", "", "", "", "", "", "", "", "", ""]
        },
        "tooltip-format": "Volume: {volume}%",
        "scroll-step": 5,
        "on-click": "foot --class=Wiremix -e wiremix",
        "on-click-right": "pamixer -t"
    },

    "backlight": {
        "format": "{icon}",
        "format-icons": ["󰃞", "󰃟", "󰃠"],
        "tooltip-format": "Brightness: {percent}%"
    },

    "custom/battery": {
        "format": "{}",
        "exec": "~/.local/bin/waybar-battery",
        "return-type": "json",
        "interval": 10
    },

    "group/tray-expander": {
        "orientation": "inherit",
        "drawer": {
            "transition-duration": 600,
            "children-class": "tray-group-item"
        },
        "modules": ["custom/expand-icon", "tray"]
    },

    "custom/expand-icon": {
        "format": "󰇙",
        "tooltip": false
    },

    "tray": {
        "icon-size": 12,
        "spacing": 30
    }
}
#+end_src

** Styling
#+begin_src css :tangle packages/hyprland/.config/waybar/style.css
. * {
  border: none;
  font-family: <<font>>;
  font-weight: bold;
  font-size: 14px;
  border-radius: 0;
  min-height: 0;
}

@import url("/home/james/.cache/matugen/colors-waybar.css");

window#waybar {
  background: @background;
  opacity: 0.9;
  color: @foreground;
}

/* Tooltip styling */
#tooltip {
  background: @background;
  border: 2px solid @primary;
  color: @on_surface;
}

#tooltip label {
  color: @on_surface;
}

/* Left section - idle inhibitor and workspaces */
.modules-left {
    margin-left: 5px;
}

#idle_inhibitor {
    margin:0 10px;
}

#idle_inhibitor.activated {
  color: @primary;
}

#workspaces {
    margin-left: 2px;
}

#workspaces button {
  all: initial;
  padding: 0 5px;
  margin: 0 5px;
  color: @foreground;
}

#workspaces button.active {
  color: @primary;
}

#workspaces button.special {
  color: @secondary;
}

#workspaces button.urgent {
  color: @error;
}

#workspaces button:hover {
  color: @primary;
}

#workspaces button.empty {
    opacity: 0.5;
}

#privacy {
    margin: 0 10px;
    color: @error;
}

/* Center section */

#custom-pomodoro {
    margin: 0 10px;
    color: @on_surface;
}

#custom-pomodoro.work {
    color: @primary;
}

#custom-pomodoro.break {
    color: @secondary;
}

#custom-pomodoro.paused {
    color: @on_surface_variant;
    opacity: 0.7;
}

#custom-pomodoro.idle {
    opacity: 0.5;
}

#clock {
  margin: 0 10px;
}

#custom-update {
  margin: 0 10px;
}

#custom-update.updates {
  color: @tertiary;
}

/* Right section - system info modules */
.modules-right {
    margin-right: 5px;
}

#cpu,
#memory,
#network,
#bluetooth,
#pulseaudio,
#backlight,
#custom-battery {
    margin: 0 15px;
}

/* Expandable tray group */
group#tray-expander {
}

#custom-expand-icon {
    margin: 0 15px;
}

#tray {
    margin: 0 15px;
}

#tray > .passive {
  -gtk-icon-effect: dim;
}

#tray > .needs-attention {
  -gtk-icon-effect: highlight;
}

.tray-group-item {
}


/* Battery states */
#custom-battery.charging {
  color: @tertiary;
}

#custom-battery.warning {
  color: @secondary;
}

#custom-battery.critical {
  color: @error;
}

/* Bluetooth states */
#bluetooth.connected {
  color: @secondary;
}

/* Network states */
#network.disconnected {
  color: @error;
}

/* Audio muted state */
#pulseaudio.muted {
  color: @error;
}
#+end_src

* Waybar (Sway)

** Configuration
#+begin_src json :tangle packages/sway/.config/waybar/config
{
  "reload_style_on_change": true,
  "layer": "top",
  "position": "top",
    "height": 30,
  "spacing": 0,
  "margin-top": 0,
  "margin-bottom": 0,
  "margin-left": 0,
  "margin-right": 0,

  "modules-left": [
    "idle_inhibitor",
    "sway/workspaces"
  ],

  "modules-center": [
    "custom/pomodoro",
    "clock",
    "custom/update"
  ],

  "modules-right": [
    "group/tray-expander",
    "cpu",
    "memory",
    "bluetooth",
    "network",
    "pulseaudio",
    "backlight",
    "custom/battery"
  ],

  "idle_inhibitor": {
    "format": "{icon}",
    "format-icons": {
      "activated": "󰅶",
      "deactivated": "󰾪"
    },
    "tooltip-format-activated": "Idle Inhibitor: Active",
    "tooltip-format-deactivated": "Idle Inhibitor: Inactive"
  },

  "sway/workspaces": {
    "format": "{icon}",
    "format-icons": {
      "default": "",
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "urgent": ""
    },
    "persistent_workspaces": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": [],
      "7": [],
      "8": [],
      "9": []
    }
  },

  "custom/pomodoro": {
    "format": "{alt} {text}",
    "exec": "~/.local/bin/waybar-pomodoro",
    "return-type": "json",
    "interval": 1,
    "on-click": "~/.local/bin/waybar-pomodoro toggle",
    "on-click-right": "~/.local/bin/waybar-pomodoro reset"
  },

  "clock": {
    "format": "{:L%A %H:%M}",
    "format-alt": "{:L%d %B W%V %Y}",
    "tooltip-format": "<tt>{calendar}</tt>",
    "calendar": {
      "mode": "month",
      "mode-mon-col": 3,
      "weeks-pos": "left",
      "on-scroll": 1,
      "on-click-right": "mode",
      // "format": {
      //   "months": "<span color='#f7768e'><b>{}</b></span>",
      //   "days": "<span color='#c0caf5'><b>{}</b></span>",
      //   "weeks": "<span color='#9ece6a'>W{}</span>",
      //   "weekdays": "<span color='#7aa2f7'>{}</span>",
      //   "today": "<span color='#ff9e64'><b><u>{}</u></b></span>"
      // }
    },
    "actions": {
      "on-click-right": "mode",
      "on-scroll-up": "shift_up",
      "on-scroll-down": "shift_down"
    }
  },

  "custom/update": {
    "format": "{}",
    "exec": "~/.local/bin/waybar-updates",
    "on-click": "foot --app-id=floating-foot -e sh -c 'yay -Syu && echo && echo Done! Press Enter to close && read'",
    "return-type": "json",
    "interval": 3600,
    "signal": 7
  },

  "cpu": {
    "interval": 5,
    "format": "󰍛",
    "tooltip-format": "CPU: {usage}%",
    "on-click": "foot --app-id=floating-foot -e btop"
  },

  "memory": {
    "interval": 5,
    "format": "󰘚",
    "tooltip-format": "RAM: {used:0.1f}G / {total:0.1f}G ({percentage}%)",
    "on-click": "foot --app-id=floating-foot -e btop"
  },

  "network": {
    "format-icons": ["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"],
    "format": "{icon}",
    "format-wifi": "{icon}",
    "format-ethernet": "󰀂",
    "format-disconnected": "󰤮",
    "tooltip-format-wifi": "{essid} ({frequency} GHz)\n⇣{bandwidthDownBytes}  ⇡{bandwidthUpBytes}",
    "tooltip-format-ethernet": "Wired\n⇣{bandwidthDownBytes}  ⇡{bandwidthUpBytes}",
    "tooltip-format-disconnected": "Disconnected",
    "interval": 3,
    "on-click": "networkmanager_dmenu"
  },

  "bluetooth": {
    "format": "",
    "format-disabled": "󰂲",
    "format-connected": "",
      // "format-connected-battery": "{icon}",
      // "format-icons": {
      //     "connected-battery": ["󰤾", "󰤿", "󰥀", "󰥁", "󰥂", "󰥃", "󰥄", "󰥅", "󰥆", "󰥈" ]
      // },
    "tooltip-format": "Bluetooth: {num_connections} connected",
    "on-click": "blueman-manager"
  },

  "pulseaudio": {
    "format": "{icon}",
    "format-muted": "",
    "format-icons": {
      "default": ["", "", "", "", "", "", "", "", "", ""],
    },
    "tooltip-format": "Volume: {volume}%",
    "scroll-step": 5,
    "on-click": "foot --class=Wiremix -e wiremix",
    "on-click-right": "pamixer -t"
  },

  "backlight": {
    "format": "{icon}",
    "format-icons": ["󰃞", "󰃟", "󰃠"],
    "tooltip-format": "Brightness: {percent}%"
  },

  "custom/battery": {
    "format": "{}",
    "exec": "~/.local/bin/waybar-battery",
    "return-type": "json",
    "interval": 10
  },

  "group/tray-expander": {
    "orientation": "inherit",
    "drawer": {
      "transition-duration": 600,
      "children-class": "tray-group-item"
    },
    "modules": ["custom/expand-icon", "tray"]
  },

  "custom/expand-icon": {
    "format": "󰇙",
    "tooltip": false
  },

  "tray": {
    "icon-size": 12,
    "spacing": 30
  }
}
#+end_src

** Styling
#+begin_src css :tangle packages/sway/.config/waybar/style.css
. * {
  border: none;
  font-family: <<font>>;
  font-weight: bold;
  font-size: 13px;
  min-height: 0;
}

window#waybar {
  background-color: @background;
}

tooltip {
  background-color: @background;
  border: 2px solid @primary;
  border-radius: 10px;
  opacity: 0.9;
}

tooltip * {
  color: @foreground;
}

/* Left section - idle inhibitor, workspaces */
#idle_inhibitor {
  margin: 0 10px;
}

#workspaces button {
    all: unset;
  padding: 0 10px;
  color: @foreground;
}

#workspaces button:hover {
  color: @primary;
}

#workspaces button.empty {
    opacity: 0.5;
}

/* Center section - pomodoro, clock and update */
#custom-pomodoro {
  margin: 0 10px;
  color: @foreground;
}

#custom-pomodoro.work {
  color: @primary;
}

#custom-pomodoro.break {
  color: @secondary;
}

#custom-pomodoro.paused {
  opacity: 0.7;
}

#custom-pomodoro.idle {
  opacity: 0.5;
}

#clock {
  margin: 0 10px;
}

#custom-update {
  margin: 0 5px;
}

#custom-update.pending {
  color: @primary;
}

/* Right section - tray and system stats */
#tray {
  margin: 0 10px;
}

#custom-expand-icon {
    margin: 0 10px;
}

#cpu,
#memory,
#network,
#pulseaudio,
#bluetooth,
#backlight,
#custom-battery {
  margin: 0 10px;
}

/* Hardware status colors */
#bluetooth.disabled {
  opacity: 0.5;
}

#network.disconnected {
  color: @error;
}

/* Audio muted state */
#pulseaudio.muted {
  color: @error;
}
#+end_src

* Mako
#+begin_src ini :tangle packages/mako/.config/mako/config
font=<<font>>
border-size=2
default-timeout=10000
width=450

outer-margin=15
padding=10
layer=overlay

# Source matugen colors
include=~/.cache/matugen/colors-mako

# Fallback colors if matugen not run
# background-color=#1a1b26
# text-color=#c0caf5
# border-color=#7aa2f7
#+end_src

* Fuzzel
#+begin_src conf :tangle packages/fuzzel/.config/fuzzel/fuzzel.ini
[main]
# Colour scheme generated by Matugen
include=~/.cache/matugen/colors-fuzzel.ini

font=<<font>>:size=8
use-bold=yes
anchor=top-left
x-margin=20
y-margin=20
width=30
horizontal-pad=10
vertical-pad=10
inner-pad=5
lines=15
icons-enabled=no
minimal-lines=yes
keyboard-focus=exclusive
exit-on-keyboard-focus-loss=no
prompt= ""
placeholder="Search to launch..."

[border]
width=3
radius=0

[key-bindings]
# Unbind default to avoid conflicts
delete-line-forward=none

# Vim-style navigation (Down/Up are already mapped to next/prev by default)
next-with-wrap=Control+j
prev-with-wrap=Control+k

#+end_src

* Network Manager Menu
#+begin_src conf :tangle packages/networkmanager_dmenu/.config/networkmanager_dmenu/config.ini
[dmenu]
dmenu_command = fuzzel --width 35
active_chars = ->
highlight = True
highlight_fg =
highlight_bg =
highlight_bold = True
compact = False
pinentry = None
# wifi_icons = 󰤯󰤟󰤢󰤥󰤨
wifi_icons = 󰢿󰢼󰢽󰢾
format = {name:<{max_len_name}s}  {sec:<{max_len_sec}s} {icon:>2}
list_saved = False
prompt = Networks:

[dmenu_passphrase]
obscure = True
# Color managed by matugen template
include = ~/.cache/matugen/networkmanager_dmenu.ini

[pinentry]
description = Get network password
prompt = Password:

[editor]
terminal = foot
gui_if_available = True
gui = nm-connection-editor

[nmdm]
rescan_delay = 3
#+end_src

* Foot
#+begin_src conf :tangle packages/foot/.config/foot/foot.ini
[main]
font=<<font>>:size=12

include=~/.cache/matugen/colors-foot.ini

pad=10x10

[bell]
urgent=yes
notify=yes
# visual=yes

[scrollback]
lines=10000
multiplier=2

[cursor]
style=beam
unfocused-style=hollow
blink=yes
blink-rate=750
#+end_src

* Yazi
#+begin_src toml :tangle packages/yazi/.config/yazi/yazi.toml
[manager]
ratio = [1, 4, 3]
#+end_src

* GTK

** GTK 3.0 Settings
#+begin_src ini :tangle packages/matugen/.config/gtk-3.0/settings.ini
[Settings]
gtk-application-prefer-dark-theme=true
gtk-theme-name=Adwaita
gtk-icon-theme-name=Adwaita
gtk-font-name=Sans 10
gtk-cursor-theme-name=Adwaita
gtk-cursor-theme-size=24
gtk-toolbar-style=GTK_TOOLBAR_BOTH_HORIZ
gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
gtk-button-images=0
gtk-menu-images=0
gtk-enable-event-sounds=1
gtk-enable-input-feedback-sounds=0
gtk-xft-antialias=1
gtk-xft-hinting=1
gtk-xft-hintstyle=hintfull
gtk-xft-rgba=rgb
#+end_src

** GTK 4.0 Settings
#+begin_src ini :tangle packages/matugen/.config/gtk-4.0/settings.ini
[Settings]
gtk-application-prefer-dark-theme=true
gtk-theme-name=Adwaita
gtk-icon-theme-name=Adwaita
gtk-font-name=Sans 10
gtk-cursor-theme-name=Adwaita
gtk-cursor-theme-size=24
gtk-xft-antialias=1
gtk-xft-hinting=1
gtk-xft-hintstyle=hintfull
gtk-xft-rgba=rgb
#+end_src

* Qt

** Qt6ct Configuration
#+begin_src ini :tangle packages/matugen/.config/qt6ct/qt6ct.conf
[Appearance]
color_scheme_path=/home/james/.config/qt6ct/colors/matugen.conf
custom_palette=true
icon_theme=Adwaita
standard_dialogs=default
style=Fusion

[Fonts]
fixed="@monospace,10,-1,5,400,0,0,0,0,0,0,0,0,0,0,1"
general="@Sans,10,-1,5,400,0,0,0,0,0,0,0,0,0,0,1"

[Interface]
activate_item_on_single_click=1
buttonbox_layout=0
cursor_flash_time=1000
dialog_buttons_have_icons=0
double_click_interval=400
gui_effects=@Invalid()
keyboard_scheme=2
menus_have_icons=true
show_shortcuts_in_context_menus=true
stylesheets=@Invalid()
toolbutton_style=4
underline_shortcut=1
wheel_scroll_lines=3

[SettingsWindow]
geometry=@ByteArray()
#+end_src

** Qt5ct Configuration
#+begin_src ini :tangle packages/matugen/.config/qt5ct/qt5ct.conf
[Appearance]
color_scheme_path=/home/james/.config/qt5ct/colors/matugen.conf
custom_palette=true
icon_theme=Adwaita
standard_dialogs=default
style=Fusion

[Fonts]
fixed="@monospace,10,-1,5,50,0,0,0,0,0"
general="@Sans,10,-1,5,50,0,0,0,0,0"

[Interface]
activate_item_on_single_click=1
buttonbox_layout=0
cursor_flash_time=1000
dialog_buttons_have_icons=0
double_click_interval=400
gui_effects=@Invalid()
keyboard_scheme=2
menus_have_icons=true
show_shortcuts_in_context_menus=true
stylesheets=@Invalid()
toolbutton_style=4
underline_shortcut=1
wheel_scroll_lines=3

[SettingsWindow]
geometry=@ByteArray()
#+end_src

** Qt Environment Variables
#+begin_src conf :tangle packages/matugen/.config/environment.d/qt.conf
# Qt theming configuration
QT_QPA_PLATFORMTHEME=qt6ct
QT_STYLE_OVERRIDE=kvantum
#+end_src

** Screenshot Selector Script (Sway)
#+begin_src bash :tangle packages/sway/.local/bin/screenshot.sh :shebang "#!/usr/bin/env bash"
set -euo pipefail

# Screenshot directory
SCREENSHOT_DIR="$HOME/Pictures/Screenshots"
mkdir -p "$SCREENSHOT_DIR"

# Screenshot filename with timestamp
FILENAME="$SCREENSHOT_DIR/screenshot_$(date +%Y%m%d_%H%M%S).png"

# Function to take screenshot, copy, and save
take_screenshot() {
    local mode=$1

    # Take screenshot based on mode
    if grimshot save "$mode" "$FILENAME"; then
        # Copy to clipboard
        wl-copy < "$FILENAME"

        # Show notification with preview
        notify-send "Screenshot Saved" \
            "Mode: $mode\nFile: $(basename "$FILENAME")\nCopied to clipboard" \
            -i "$FILENAME" \
            -u normal
    else
        notify-send "Screenshot Failed" \
            "Failed to capture $mode" \
            -u critical
    fi
}

# If argument provided, take screenshot directly
if [ $# -gt 0 ]; then
    take_screenshot "$1"
    exit 0
fi

# Show fuzzel menu to select mode
MODE=$(printf "Screen (full)\nArea (selection)\nWindow (active)\nOutput (monitor)" | \
    fuzzel --dmenu --placeholder "What to screenshot...")

# Exit if cancelled
if [ -z "$MODE" ]; then
    exit 0
fi

# Map selection to grimshot mode
case "$MODE" in
    "Screen (full)")
        take_screenshot "screen"
        ;;
    "Area (selection)")
        take_screenshot "area"
        ;;
    "Window (active)")
        take_screenshot "active"
        ;;
    "Output (monitor)")
        take_screenshot "output"
        ;;
esac
#+end_src

** Screenshot Selector Script (Hyprland)
#+begin_src bash :tangle packages/hyprland/.local/bin/screenshot.sh :shebang "#!/usr/bin/env bash"
set -euo pipefail

# Screenshot directory
SCREENSHOT_DIR="$HOME/Pictures/Screenshots"
mkdir -p "$SCREENSHOT_DIR"

# Screenshot filename with timestamp
FILENAME="$SCREENSHOT_DIR/screenshot_$(date +%Y%m%d_%H%M%S).png"

# Function to take screenshot, copy, and save
take_screenshot() {
    local mode=$1

    # Take screenshot based on mode using hyprshot
    case "$mode" in
        "screen")
            hyprshot -m output -o "$SCREENSHOT_DIR" -f "$(basename "$FILENAME")" --clipboard-only
            ;;
        "area")
            hyprshot -m region -o "$SCREENSHOT_DIR" -f "$(basename "$FILENAME")" --clipboard-only
            ;;
        "window")
            hyprshot -m window -o "$SCREENSHOT_DIR" -f "$(basename "$FILENAME")" --clipboard-only
            ;;
    esac

    # Check if screenshot was created
    if [ -f "$FILENAME" ]; then
        notify-send "Screenshot Saved" \
            "Mode: $mode\nFile: $(basename "$FILENAME")\nCopied to clipboard" \
            -i "$FILENAME" \
            -u normal
    else
        notify-send "Screenshot Failed" \
            "Failed to capture $mode" \
            -u critical
    fi
}

# If argument provided, take screenshot directly
if [ $# -gt 0 ]; then
    take_screenshot "$1"
    exit 0
fi

# Show fuzzel menu to select mode
MODE=$(printf "Screen (full)\nArea (selection)\nWindow (active)" | \
    fuzzel --dmenu --placeholder "Screenshot...")

# Exit if cancelled
if [ -z "$MODE" ]; then
    exit 0
fi

# Map selection to screenshot mode
case "$MODE" in
    "Screen (full)")
        take_screenshot "screen"
        ;;
    "Area (selection)")
        take_screenshot "area"
        ;;
    "Window (active)")
        take_screenshot "window"
        ;;
esac
#+end_src

** Layout Indicator Script
#+begin_src bash :tangle packages/waybar/.local/bin/get-layout.sh :shebang "#!/usr/bin/env bash"
# Get the layout of the parent container of the focused window
# Focused windows themselves have layout "none", so we need to check the parent

TREE=$(swaymsg -t get_tree)

# Find the focused window and get its ID
FOCUSED_ID=$(echo "$TREE" | jq -r '.. | select(.focused? == true) | .id')

# Find the parent container of the focused window
PARENT_LAYOUT=$(echo "$TREE" | jq -r --arg id "$FOCUSED_ID" '
  .. |
  objects |
  select(.nodes[]?.id == ($id | tonumber) or .floating_nodes[]?.id == ($id | tonumber)) |
  .layout
' | grep -v "^null$" | head -1)

# If no parent found, try getting workspace layout
if [ -z "$PARENT_LAYOUT" ] || [ "$PARENT_LAYOUT" = "none" ]; then
    PARENT_LAYOUT=$(echo "$TREE" | jq -r '.. | select(.type? == "workspace" and .focused? == true) | .layout' | head -1)
fi

# Map layout names to symbols
case "$PARENT_LAYOUT" in
    splith) echo "⬌" ;;
    splitv) echo "⬍" ;;
    tabbed) echo "☰" ;;
    stacked) echo "☷" ;;
    *) echo "▪" ;;  # Default symbol for unknown/single window
esac
#+end_src

* Qutebrowser

** Configuration
*** Auto Config
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/james/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/james/.local/share/qutebrowser/userscripts/*')

#+end_src

*** General Settings
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Session management
c.auto_save.session = True
c.session.lazy_restore = True

# Start page
c.url.default_page = 'file:///home/james/.cache/matugen/qutebrowser-startpage.html'
c.url.start_pages = ['file:///home/james/.cache/matugen/qutebrowser-startpage.html']

# Content blocking (requires: python-adblock from extra repo)
c.content.blocking.enabled = True
c.content.blocking.method = 'both'  # Use both hosts and brave's adblock
c.content.blocking.hosts.lists = [
    'https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts',
]
c.content.blocking.adblock.lists = [
    'https://easylist.to/easylist/easylist.txt',
    'https://easylist.to/easylist/easyprivacy.txt',
    'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
    'https://easylist-downloads.adblockplus.org/antiadblockfilters.txt',
]

# Privacy
c.content.cookies.accept = 'no-3rdparty'
c.content.headers.do_not_track = True
c.content.webgl = False

# Smooth scrolling
c.scrolling.smooth = True

# Downloads
c.downloads.location.directory = '~/Downloads'
c.downloads.location.prompt = True
c.downloads.remove_finished = 5000

# Zoom
c.zoom.default = '110%'
#+end_src

*** Fonts
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Font configuration
c.fonts.default_family = '<<font>>'
c.fonts.default_size = '11pt'
c.fonts.web.family.sans_serif = '<<font-sans>>'
c.fonts.web.family.serif = '<<font-serif>>'
c.fonts.web.family.fixed = '<<font>>'
c.fonts.web.size.default = 18
c.fonts.hints = '<<font>>'
#+end_src

*** Appearance
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Hints
c.hints.border = '2px solid'
c.hints.padding = {"bottom": 3, "top": 3, "left": 3, "right": 3}
c.hints.radius = 0
c.hints.uppercase = True
c.fonts.hints = 'bold 12pt <<font>>'

# Tabs
c.tabs.position = "top"
c.tabs.background = True
c.tabs.select_on_remove = 'prev'
c.tabs.favicons.show = "always"
c.tabs.show = 'always'
c.tabs.show_switching_delay = 900
c.tabs.width = '25%'
c.tabs.padding = {"bottom": 5, "left": 10, "right": 10, "top": 5}
c.tabs.indicator.padding = {"bottom": 0, "left": 0, "right": 5, "top": 0}
c.tabs.indicator.width = 0
c.tabs.last_close = 'default-page'
c.tabs.min_width = 150

# Status bar
c.statusbar.show = 'in-mode'
c.statusbar.padding = {"bottom": 5, "left": 10, "right": 10, "top": 5}

# Scrollbar
c.scrolling.bar = 'always'

# Completion
c.completion.height = '30%'
c.completion.show = 'always'
c.completion.shrink = True
c.completion.quick = True
#+end_src

*** Editor
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# External editor
c.editor.command = ['emacsclient', '-c', '-a', ' ', '+{line}:{column}', '{}']
#+end_src

*** Search Engines
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Custom search engines
c.url.searchengines['DEFAULT'] = 'https://duckduckgo.com/?q={}'
c.url.searchengines['gg'] = 'https://www.google.com/search?q={}'
c.url.searchengines['am'] = 'https://www.amazon.co.uk/s?k={}'
c.url.searchengines['yt'] = 'https://www.youtube.com/results?search_query={}'
c.url.searchengines['aur'] = 'https://aur.archlinux.org/packages?O=0&K={}'
c.url.searchengines['arp'] = 'https://archlinux.org/packages/?sort=&q={}&maintainer=&flagged='
c.url.searchengines['ar'] = 'https://wiki.archlinux.org/index.php?search={}'
c.url.searchengines['rd'] = 'https://www.reddit.com/search/?q={}'
c.url.searchengines['ghr'] = 'https://github.com/search?q={}&type=repositories'
c.url.searchengines['ghc'] = 'https://github.com/search?q={}&type=code'
c.url.searchengines['man'] = 'https://man.archlinux.org/search?q={}'
c.url.searchengines['img'] = 'https://www.google.com/search?tbm=isch&q={}'
c.url.searchengines['maps'] = 'https://www.google.com/maps/search/{}'
c.url.searchengines['wiki'] = 'https://en.wikipedia.org/wiki/{}'
c.url.searchengines['trans'] = 'https://translate.google.com/?sl=auto&tl=en&text={}'
#+end_src

*** Keybindings
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# General keybinds
config.bind('t.', 'config-source')
config.bind('M', 'hint links spawn mpv {hint-url}')
config.bind('gh', 'home')
config.bind('gp', 'open -p')
config.bind('pp', 'hint links run open -p {hint-url}')

# Tabs
config.bind(',tp', 'config-cycle tabs.position "top" "left"')
config.bind(',ts', 'config-cycle tabs.show "always" "switching"')
config.bind('tt', 'config-cycle tabs.show "always" "switching"')
config.bind('tpo', 'config-cycle tabs.position "top" "left"')

# Dark mode toggle
config.bind('td', 'config-cycle colors.webpage.darkmode.enabled "true" "false"')

# Userscripts
config.bind('zv', 'spawn --userscript video-download')
config.bind('zr', 'spawn --userscript reading-mode')
config.bind('zt', 'spawn --userscript translate-page')
config.bind('za', 'spawn --userscript paywall-bypass')

# Vim-style navigation for completion/prompts
config.bind('<Ctrl-j>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-k>', 'completion-item-focus prev', mode='command')
config.bind('<Ctrl-j>', 'prompt-item-focus next', mode='prompt')
config.bind('<Ctrl-k>', 'prompt-item-focus prev', mode='prompt')
#+end_src

*** Colours (Matugen)
#+begin_src python :tangle packages/qutebrowser/.config/qutebrowser/config.py
# Source matugen colors
import os

matugen_colors = os.path.expanduser('~/.cache/matugen/colors-qutebrowser.py')
if os.path.exists(matugen_colors):
    config.source(matugen_colors)
#+end_src

** User-scripts

*** Video Download
#+begin_src bash :tangle packages/qutebrowser/.local/share/qutebrowser/userscripts/video-download :shebang "#!/usr/bin/env bash"
# Download video from current URL using yt-dlp
# Requires: yt-dlp

url="$QUTE_URL"
download_dir="$HOME/Downloads/videos"

mkdir -p "$download_dir"

echo "message-info 'Downloading video from $url...'" >> "$QUTE_FIFO"

# Download in background
(
    cd "$download_dir" || exit
    yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' "$url" 2>&1
    if [ $? -eq 0 ]; then
        notify-send "Video Download" "Successfully downloaded from $url"
    else
        notify-send "Video Download" "Failed to download from $url"
    fi
) &

echo "message-info 'Video download started in background'" >> "$QUTE_FIFO"
#+end_src

*** Reading Mode
#+begin_src bash :tangle packages/qutebrowser/.local/share/qutebrowser/userscripts/reading-mode :shebang "#!/usr/bin/env bash"
# Toggle reading mode using readability
# Requires: python-readability-lxml

url="$QUTE_URL"
tmpfile="/tmp/qutebrowser-reading-$$.html"

# Use python-readability-lxml
if ! python3 -c "import readability" 2>/dev/null; then
    echo "message-error 'Reading mode: Install python-readability-lxml'" >> "$QUTE_FIFO"
    exit 1
fi

python3 << EOF > "$tmpfile"
from readability import Document
import requests
import sys

try:
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
    }
    response = requests.get('$url', headers=headers, timeout=10)
    response.raise_for_status()
    doc = Document(response.text)

    html = f'''<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{doc.title()}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        body {{
            max-width: 750px;
            margin: 0 auto;
            padding: 3rem 2rem;
            font-family: "Georgia", "Cambria", "Times New Roman", serif;
            font-size: 18px;
            line-height: 1.7;
            color: #333;
            background: #fafafa;
        }}
        h1, h2, h3, h4, h5, h6 {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
            font-weight: 700;
            line-height: 1.3;
            margin-top: 2rem;
            margin-bottom: 1rem;
            color: #1a1a1a;
        }}
        h1 {{ font-size: 2.5rem; margin-top: 0; }}
        h2 {{ font-size: 2rem; }}
        h3 {{ font-size: 1.5rem; }}
        h4 {{ font-size: 1.25rem; }}
        p {{
            margin-bottom: 1.5rem;
            text-align: justify;
        }}
        a {{
            color: #0066cc;
            text-decoration: none;
            border-bottom: 1px solid #0066cc;
        }}
        a:hover {{ color: #004499; }}
        img {{
            max-width: 100%;
            height: auto;
            display: block;
            margin: 2rem auto;
            border-radius: 4px;
        }}
        pre, code {{
            font-family: "Consolas", "Monaco", "Courier New", monospace;
            background: #f5f5f5;
            border-radius: 3px;
        }}
        pre {{
            padding: 1rem;
            overflow-x: auto;
            margin-bottom: 1.5rem;
        }}
        code {{
            padding: 0.2rem 0.4rem;
            font-size: 0.9em;
        }}
        pre code {{
            padding: 0;
            background: none;
        }}
        blockquote {{
            margin: 1.5rem 0;
            padding-left: 1.5rem;
            border-left: 4px solid #ddd;
            color: #666;
            font-style: italic;
        }}
        ul, ol {{
            margin-bottom: 1.5rem;
            padding-left: 2rem;
        }}
        li {{
            margin-bottom: 0.5rem;
        }}
        hr {{
            border: none;
            border-top: 2px solid #ddd;
            margin: 2rem 0;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5rem;
        }}
        th, td {{
            padding: 0.75rem;
            border: 1px solid #ddd;
            text-align: left;
        }}
        th {{
            background: #f5f5f5;
            font-weight: 600;
        }}
        @media (prefers-color-scheme: dark) {{
            body {{
                background: #1a1a1a;
                color: #e0e0e0;
            }}
            h1, h2, h3, h4, h5, h6 {{
                color: #f0f0f0;
            }}
            a {{
                color: #6699ff;
                border-bottom-color: #6699ff;
            }}
            a:hover {{ color: #99bbff; }}
            pre, code {{
                background: #2a2a2a;
            }}
            blockquote {{
                border-left-color: #444;
                color: #aaa;
            }}
            hr {{
                border-top-color: #444;
            }}
            th {{
                background: #2a2a2a;
            }}
            th, td {{
                border-color: #444;
            }}
        }}
    </style>
</head>
<body>
{doc.summary()}
</body>
</html>'''

    print(html)
except Exception as e:
    print(f'<html><body style="padding:2rem;font-family:sans-serif;"><h1>Reading Mode Error</h1><p>{str(e)}</p></body></html>')
    sys.exit(1)
EOF

if [ $? -eq 0 ]; then
    echo "open -t file://$tmpfile" >> "$QUTE_FIFO"
    echo "message-info 'Reading mode activated'" >> "$QUTE_FIFO"
else
    echo "message-error 'Reading mode: Failed to process page'" >> "$QUTE_FIFO"
    rm -f "$tmpfile"
fi
#+end_src

*** Translate Page
#+begin_src bash :tangle packages/qutebrowser/.local/share/qutebrowser/userscripts/translate-page :shebang "#!/usr/bin/env bash"
# Translate current page using Google Translate

url="$QUTE_URL"
target_lang="${1:-en}"

# Use Google Translate
translate_url="https://translate.google.com/translate?sl=auto&tl=${target_lang}&u=$(echo "$url" | jq -sRr @uri)"

echo "open -t $translate_url" >> "$QUTE_FIFO"
echo "message-info 'Translating page to $target_lang'" >> "$QUTE_FIFO"
#+end_src

*** Paywall Bypass
#+begin_src bash :tangle packages/qutebrowser/.local/share/qutebrowser/userscripts/paywall-bypass :shebang "#!/usr/bin/env bash"
# Bypass paywalls using archive.is

url="$QUTE_URL"

# Check if already on archive.is
if [[ "$url" == *"archive."* ]]; then
    echo "message-warning 'Already on archive site'" >> "$QUTE_FIFO"
    exit 0
fi

# Try archive.is
archive_url="https://archive.is/newest/$url"

echo "open -t $archive_url" >> "$QUTE_FIFO"
echo "message-info 'Opening archived version'" >> "$QUTE_FIFO"
#+end_src

** Grease-monkey
Qutebrowser supports Grease-monkey scripts in =~/.local/share/qutebrowser/greasemonkey/=.

To install scripts:
1. Download .js files from greasyfork.org or other sources
2. Place them in =~/.local/share/qutebrowser/greasemonkey/=
3. Run =:greasemonkey-reload= in qutebrowser

Recommended scripts:
- YouTube: *SponsorBlock*, *Return YouTube Dislike*
- Reddit: *Reddit Enhancement Suite (RES)* - Note: Use old.reddit.com redirect instead
- General: *Dark Reader*, *uBlock Origin Extra*

** Bookmarks
Bookmarks are managed directly by qutebrowser at =~/.config/qutebrowser/bookmarks/urls=.

Initial import (one-time):
#+begin_src sh :tangle no
mkdir -p ~/.config/qutebrowser/bookmarks
cp ~/stow/qutebrowser/.config/qutebrowser/bookmarks/urls ~/.config/qutebrowser/bookmarks/urls
#+end_src

* Swaylock
#+begin_src conf :tangle packages/swaylock/.config/swaylock/config
color=1a1b26
#+end_src

* Swayidle

** Swayidle Launcher Script
#+begin_src sh :tangle packages/swayidle/.local/bin/start-swayidle.sh :shebang "#!/usr/bin/env bash"
# Kill any existing swayidle instances
pkill swayidle

# Check if on battery or AC
if [ -d /sys/class/power_supply/AC ] || [ -d /sys/class/power_supply/AC0 ] || [ -d /sys/class/power_supply/ACAD ]; then
    # Find the AC adapter
    AC_PATH=$(find /sys/class/power_supply -name 'AC*' -o -name 'ACAD' | head -n 1)

    if [ -n "$AC_PATH" ] && [ "$(cat $AC_PATH/online)" = "0" ]; then
        # On battery
        swayidle -w \
            timeout 300 'swaymsg "output * dpms off"' \
            resume 'swaymsg "output * dpms on"' \
            timeout 600 'swaylock' \
            timeout 1800 'systemctl suspend'
    else
        # Plugged in
        swayidle -w \
            timeout 600 'swaymsg "output * dpms off"' \
            resume 'swaymsg "output * dpms on"' \
            timeout 900 'swaylock' \
            timeout 3600 'systemctl suspend'
    fi
else
    # Fallback if no AC adapter found (desktop)
    swayidle -w \
        timeout 600 'swaymsg "output * dpms off"' \
        resume 'swaymsg "output * dpms on"' \
        timeout 900 'swaylock'
fi
#+end_src

* Zsh

** Performance: Enable Profiling (Optional)
#+begin_src sh :tangle packages/zsh/.zshrc
# Uncomment to profile zsh startup time
# zmodload zsh/zprof
#+end_src

** Core Configuration
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# ZSH Core Configuration
# ============================================================================

# Auto-start WM on TTY1 (before anything else)
if [ -z "$WAYLAND_DISPLAY" ] && [ "$XDG_VTNR" -eq 1 ]; then
  exec ~/.local/bin/select-wm.sh hyprland
fi

# History configuration
HISTFILE=~/.cache/zsh/history
HISTSIZE=50000
SAVEHIST=50000

# Create cache directory if it doesn't exist
[[ -d ~/.cache/zsh ]] || mkdir -p ~/.cache/zsh
#+end_src

** ZSH Options
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# ZSH Options
# ============================================================================

# History options
setopt EXTENDED_HISTORY          # Write timestamp to history
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first
setopt HIST_IGNORE_DUPS          # Don't record duplicates
setopt HIST_IGNORE_SPACE         # Don't record commands starting with space
setopt HIST_VERIFY               # Show command with history expansion before running
setopt SHARE_HISTORY             # Share history between sessions
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks
setopt INC_APPEND_HISTORY        # Write to history immediately

# Directory options
setopt AUTO_CD                   # cd by typing directory name
setopt AUTO_PUSHD                # Push directories onto stack
setopt PUSHD_IGNORE_DUPS         # Don't push duplicates
setopt PUSHD_SILENT              # Don't print directory stack

# Completion options
setopt ALWAYS_TO_END             # Move cursor to end after completion
setopt AUTO_MENU                 # Show completion menu on tab
setopt COMPLETE_IN_WORD          # Complete from both ends of word
setopt MENU_COMPLETE             # Autoselect first completion entry

# Correction and expansion
setopt CORRECT                   # Correct command spelling
setopt EXTENDED_GLOB             # Extended globbing patterns

# Other options
setopt INTERACTIVE_COMMENTS      # Allow comments in interactive shell
setopt MULTIOS                   # Enable multiple redirections
#+end_src

** Zinit Plugin Manager
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Zinit Plugin Manager
# ============================================================================

# Install zinit if not present
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -d "$ZINIT_HOME" ]]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Load zinit
source "${ZINIT_HOME}/zinit.zsh"
#+end_src

** Essential Plugins
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Essential Plugins
# ============================================================================

# Load completion system first
autoload -Uz compinit
compinit -d ~/.cache/zsh/zcompdump-$ZSH_VERSION

# Syntax highlighting (must be loaded before other plugins)
zinit light zdharma-continuum/fast-syntax-highlighting

# Fish-like autosuggestions
zinit light zsh-users/zsh-autosuggestions

# Additional completions
zinit light zsh-users/zsh-completions

# History substring search (bind keys after loading)
zinit light zsh-users/zsh-history-substring-search

# FZF integration
zinit ice lucid wait
zinit snippet OMZP::fzf

# Git aliases and functions
zinit ice lucid wait
zinit snippet OMZL::git.zsh

# Docker completions
zinit ice lucid wait as"completion"
zinit snippet OMZP::docker

# npm completions
zinit ice lucid wait as"completion"
zinit snippet OMZP::npm

# Auto-pair brackets/quotes
zinit light hlissner/zsh-autopair

# Better cd with interactive menu
zinit light skywind3000/z.lua

# Colorize man pages
zinit light ael-code/zsh-colored-man-pages
#+end_src

** Completion System Configuration
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Enhanced Completion System
# ============================================================================

# Completion styling
zstyle ':completion:*' menu select                                    # Interactive menu
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'            # Case insensitive
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"              # Colored completion
zstyle ':completion:*' group-name ''                                  # Group results
zstyle ':completion:*:descriptions' format '%F{yellow}%B%d%b%f'      # Group descriptions
zstyle ':completion:*:warnings' format '%F{red}No matches found%f'   # No match warning
zstyle ':completion:*' verbose yes                                    # Verbose output
zstyle ':completion:*' use-cache yes                                  # Use cache
zstyle ':completion:*' cache-path ~/.cache/zsh/zcompcache            # Cache location

# Partial completion
zstyle ':completion:*' list-suffixes
zstyle ':completion:*' expand prefix suffix

# Process completion
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

# Directory completion
zstyle ':completion:*:cd:*' ignore-parents parent pwd  # Don't complete pwd or parent

# Completion for custom commands
compdef _gnu_generic bat
compdef _gnu_generic eza
compdef _gnu_generic fd
compdef _gnu_generic rg
#+end_src

** Key Bindings
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Key Bindings
# ============================================================================

# Use emacs keybindings
bindkey -e

# History substring search (bind to up/down arrows)
bindkey '^[[A' history-substring-search-up      # Up arrow
bindkey '^[[B' history-substring-search-down    # Down arrow
bindkey '^P' history-substring-search-up        # Ctrl+P
bindkey '^N' history-substring-search-down      # Ctrl+N

# Enhanced history search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# Word movement
bindkey '^[[1;5C' forward-word      # Ctrl+Right
bindkey '^[[1;5D' backward-word     # Ctrl+Left

# Line editing
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^K' kill-line
bindkey '^U' backward-kill-line
bindkey '^W' backward-kill-word
bindkey '^Y' yank

# Alt+. to insert last argument
bindkey '\e.' insert-last-word

# Delete key
bindkey '^[[3~' delete-char

# Home/End keys
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line

# Accept autosuggestion
bindkey '^ ' autosuggest-accept              # Ctrl+Space
bindkey '^[[Z' autosuggest-accept            # Shift+Tab
#+end_src

** PATH Configuration
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# PATH Configuration
# ============================================================================

# User binaries
export PATH="$HOME/.local/bin:$PATH"

# Doom Emacs
export PATH="$HOME/.config/emacs/bin:$PATH"

# NPM global packages
export PATH="$HOME/.npm/bin:$PATH"

# Rust cargo
[[ -d "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"
#+end_src

** Tool Initialization
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Tool Initialization
# ============================================================================

# Zoxide - smart directory jumping
eval "$(zoxide init zsh)"

# FZF configuration
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --inline-info"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

# Starship prompt (must be at end)
eval "$(starship init zsh)"
#+end_src

** Functions
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Custom Functions
# ============================================================================

# Yazi - cd on quit
function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# Create directory and cd into it
function mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract any archive
function extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Quick backup of a file
function bak() {
    cp "$1" "$1.bak"
}

# Show directory stack
function d() {
    dirs -v | head -n 10
}

# Jump to directory in stack (e.g., "2" to jump to item 2)
for index in {1..9}; do
    alias "$index"="cd +${index}"
done
#+end_src

** Aliases
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Aliases
# ============================================================================

# Navigation
alias cd="z"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ~="cd ~"
alias -- -="cd -"

# ls alternatives
if command -v eza &> /dev/null; then
    alias ls="eza --icons --group-directories-first"
    alias ll="eza --icons --group-directories-first -l"
    alias la="eza --icons --group-directories-first -la"
    alias lt="eza --icons --group-directories-first --tree"
    alias tree="eza --icons --tree"
else
    alias ls="ls --color=auto --group-directories-first"
    alias ll="ls -lh"
    alias la="ls -lah"
fi

# Safe file operations
alias rm="trash -i"
alias cp="cp -i"
alias mv="mv -i"
alias mkdir="mkdir -p"

# Better defaults
alias cat="bat"
alias grep="rg"
alias find="fd"
alias du="dust"
alias df="duf"
alias top="btop"
alias htop="btop"
alias neofetch="fastfetch"
alias fetch="fastfetch"

# Git aliases (in addition to OMZ git plugin)
alias g="git"
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gl="git pull"
alias gd="git diff"
alias gco="git checkout"
alias gb="git branch"
alias glog="git log --oneline --graph --decorate"

# Quick access
alias zshrc="nvim ~/.zshrc"
alias zshconfig="nvim ~/dotfile/dotfiles.org"
alias r="source ~/.zshrc"
alias reload="source ~/.zshrc"

# Package management
alias paci="sudo pacman --noconfirm -S"
alias pacr="sudo pacman -Rns"
alias pacs="pacman -Ss"
alias pacu="sudo pacman -Syu"
alias yayi="yay -S"
alias yays="yay -Ss"
alias update="sudo pacman --noconfirm -Syyuu && yay --noconfirm -Syyuua"
alias clean="yay -Sc && yay -Yc"

# System
alias shutdown="shutdown now"
alias reboot="reboot"
alias suspend="systemctl suspend"
alias hibernate="systemctl hibernate"

# Development
alias py="python3"
alias pip="pip3"
alias v="nvim"
alias vim="nvim"

# Misc
alias c="clear"
alias h="history"
alias j="jobs"
alias ports="netstat -tulanp"
alias wget="wget -c"
alias myip="curl ifconfig.me"
#+end_src

** Fastfetch
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Fastfetch
# ============================================================================

# Show fastfetch on new terminal
if [[ -o interactive ]] && [[ -z "$TMUX" ]]; then
  fastfetch
fi
#+end_src

** Performance: End Profiling
#+begin_src sh :tangle packages/zsh/.zshrc
# ============================================================================
# Performance Profiling (Optional)
# ============================================================================

# Uncomment to see profiling results
# zprof
#+end_src

** Starship Prompt Configuration
#+begin_src toml :tangle packages/zsh/.config/starship.toml
# Starship Prompt Configuration
# Minimal, fast, and informative

# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# Timeout for commands
command_timeout = 1000

# Format
format = """
[┌──](bold blue)$username$hostname$directory$git_branch$git_status$git_state
[└─](bold blue)$character"""

# Right prompt
right_format = """$cmd_duration$time"""

# Continuation prompt
continuation_prompt = "[∙](bright-black) "

[character]
success_symbol = "[❯](bold green)"
error_symbol = "[❯](bold red)"
vimcmd_symbol = "[❮](bold green)"

[username]
style_user = "bold blue"
style_root = "bold red"
format = "[$user]($style)"
disabled = false
show_always = false

[hostname]
ssh_only = true
format = "[@$hostname](bold yellow) "
disabled = false

[directory]
truncation_length = 3
truncate_to_repo = true
format = " in [$path]($style)[$read_only]($read_only_style) "
style = "bold cyan"
read_only = " 󰌾"
read_only_style = "red"
home_symbol = "~"

[directory.substitutions]
"Documents" = "󰈙 "
"Downloads" = " "
"Music" = " "
"Pictures" = " "
"Videos" = " "
".config" = " "

[git_branch]
symbol = " "
format = "on [$symbol$branch(:$remote_branch)]($style) "
style = "bold purple"

[git_status]
format = "([$all_status$ahead_behind]($style) )"
style = "bold red"
conflicted = "="
ahead = "⇡${count}"
behind = "⇣${count}"
diverged = "⇕⇡${ahead_count}⇣${behind_count}"
up_to_date = ""
untracked = "?${count}"
stashed = "$"
modified = "!${count}"
staged = "+${count}"
renamed = "»${count}"
deleted = "✘${count}"

[git_state]
format = "[$state( $progress_current/$progress_total)]($style) "
style = "bright-black"

[cmd_duration]
min_time = 2000
format = "took [$duration]($style)"
style = "bold yellow"

[time]
disabled = false
format = "[$time]($style)"
style = "bold white"
time_format = "%T"

# Language/Tool Specific
[nodejs]
symbol = " "
format = "via [$symbol($version )]($style)"

[python]
symbol = " "
format = 'via [${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'

[rust]
symbol = " "
format = "via [$symbol($version )]($style)"

[golang]
symbol = " "
format = "via [$symbol($version )]($style)"

[docker_context]
symbol = " "
format = "via [$symbol$context]($style) "

[package]
symbol = "󰏗 "
format = "is [$symbol$version]($style) "

[memory_usage]
disabled = true
threshold = 75
symbol = "󰍛 "
format = "via $symbol[${ram_pct}]($style) "

[battery]
disabled = true
#+end_src

** WM Selector Script
#+begin_src sh :tangle packages/zsh/.local/bin/select-wm.sh :shebang "#!/usr/bin/env sh"
WM="${1:-hyprland}"

case "$WM" in
  hyprland|sway|river|niri)
    # Special handling for hyprland executable
    if [ "$WM" = "hyprland" ]; then
      exec Hyprland
    else
      exec "$WM"
    fi
    ;;
  *)
    echo "Unknown WM: $WM"
    exit 1
    ;;
esac
#+end_src

* Matugen

** Configuration
#+begin_src toml :tangle packages/matugen/.config/matugen/config.toml
# Matugen Configuration

[config]
reload_apps = true
reload_apps_list = ["hyprland", "waybar"]
# Use scheme-content for better color generation
# scheme_type = "content"

[templates.hyprland]
input_path = "~/.config/matugen/templates/hyprland.conf"
output_path = "~/.cache/matugen/colors-hyprland.conf"
post_hook = 'hyprctl reload'

[templates.hyprlock]
input_path = "~/.config/matugen/templates/hyprlock.conf"
output_path = "~/.cache/matugen/colors-hyprlock.conf"

[templates.waybar]
input_path = "~/.config/matugen/templates/waybar.css"
output_path = "~/.cache/matugen/colors-waybar.css"

[templates.foot]
input_path = "~/.config/matugen/templates/foot.ini"
output_path = "~/.cache/matugen/colors-foot.ini"

[templates.mako]
input_path = "~/.config/matugen/templates/mako.conf"
output_path = "~/.cache/matugen/colors-mako"

[templates.fuzzel]
input_path = "~/.config/matugen/templates/fuzzel.ini"
output_path = "~/.cache/matugen/colors-fuzzel.ini"

[templates.networkmanager_dmenu]
input_path = "~/.config/matugen/templates/networkmanager_dmenu.ini"
output_path = "~/.cache/matugen/networkmanager_dmenu.ini"

[templates.sway]
input_path = "~/.config/matugen/templates/sway.conf"
output_path = "~/.cache/matugen/colors-sway"

[templates.qutebrowser]
input_path = "~/.config/matugen/templates/qutebrowser.py"
output_path = "~/.cache/matugen/colors-qutebrowser.py"

[templates.qutebrowser-startpage]
input_path = "~/.config/matugen/templates/qutebrowser-startpage.html"
output_path = "~/.cache/matugen/qutebrowser-startpage.html"

[templates.gtk3]
input_path = "~/.config/matugen/templates/gtk.css"
output_path = "~/.config/gtk-3.0/gtk.css"

[templates.gtk4]
input_path = "~/.config/matugen/templates/gtk.css"
output_path = "~/.config/gtk-4.0/gtk.css"

[templates.qt6ct]
input_path = "~/.config/matugen/templates/qt6ct.conf"
output_path = "~/.config/qt6ct/colors/matugen.conf"

[templates.qt5ct]
input_path = "~/.config/matugen/templates/qt5ct.conf"
output_path = "~/.config/qt5ct/colors/matugen.conf"
#+end_src

** Sway Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/sway.conf
# Generated by matugen

# Sway color variables
set $bg {{colors.surface.default.hex}}
set $fg {{colors.on_surface.default.hex}}
set $accent {{colors.primary.default.hex}}
set $urgent {{colors.error.default.hex}}

# Material You color palette
set $background {{colors.background.default.hex}}
set $foreground {{colors.on_background.default.hex}}
set $primary {{colors.primary.default.hex}}
set $on_primary {{colors.on_primary.default.hex}}
set $primary_container {{colors.primary_container.default.hex}}
set $on_primary_container {{colors.on_primary_container.default.hex}}
set $secondary {{colors.secondary.default.hex}}
set $on_secondary {{colors.on_secondary.default.hex}}
set $tertiary {{colors.tertiary.default.hex}}
set $surface {{colors.surface.default.hex}}
set $on_surface {{colors.on_surface.default.hex}}
set $surface_variant {{colors.surface_variant.default.hex}}
set $on_surface_variant {{colors.on_surface_variant.default.hex}}
set $surface_dim {{colors.surface_dim.default.hex}}
set $error {{colors.error.default.hex}}
set $on_error {{colors.on_error.default.hex}}
#+end_src

** Hyprland Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/hyprland.conf

$background = rgb({{colors.background.default.hex_stripped}})
$foreground = rgb({{colors.on_background.default.hex_stripped}})
$primary = rgb({{colors.primary.default.hex_stripped}})
$on_primary = rgb({{colors.on_primary.default.hex_stripped}})
$primary_container = rgb({{colors.primary_container.default.hex_stripped}})
$on_primary_container = rgb({{colors.on_primary_container.default.hex_stripped}})
$secondary = rgb({{colors.secondary.default.hex_stripped}})
$secondary_container = rgb({{colors.secondary_container.default.hex_stripped}})
$on_secondary = rgb({{colors.on_secondary.default.hex_stripped}})
$tertiary = rgb({{colors.tertiary.default.hex_stripped}})
$tertiary_container = rgb({{colors.tertiary_container.default.hex_stripped}})
$surface = rgb({{colors.surface.default.hex_stripped}})
$on_surface = rgb({{colors.on_surface.default.hex_stripped}})
$surface_variant = rgb({{colors.surface_variant.default.hex_stripped}})
$on_surface_variant = rgb({{colors.on_surface_variant.default.hex_stripped}})
$surface_dim = rgb({{colors.surface_dim.default.hex_stripped}})
$error = rgb({{colors.error.default.hex_stripped}})
$on_error = rgb({{colors.on_error.default.hex_stripped}})
# <* for name, value in colors *>
# $image = {{image}}
# ${{name}} = rgba({{value.default.hex_stripped}}ff)
# <* endfor *>
#+end_src

** Hyprlock Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/hyprlock.conf
# Generated by matugen - Hyprlock colors

$background = {{colors.background.default.hex_stripped}}
$foreground = {{colors.on_background.default.hex_stripped}}
$primary = {{colors.primary.default.hex_stripped}}
$on_primary = {{colors.on_primary.default.hex_stripped}}
$surface = {{colors.surface.default.hex_stripped}}
$on_surface = {{colors.on_surface.default.hex_stripped}}
$surface_variant = {{colors.surface_variant.default.hex_stripped}}
$on_surface_variant = {{colors.on_surface_variant.default.hex_stripped}}
$tertiary = {{colors.tertiary.default.hex_stripped}}
$error = {{colors.error.default.hex_stripped}}
$on_error = {{colors.on_error.default.hex_stripped}}
#+end_src

** Waybar Template
#+begin_src css :tangle packages/matugen/.config/matugen/templates/waybar.css
/* Generated by matugen */

@define-color background {{colors.background.default.hex}};
@define-color foreground {{colors.on_background.default.hex}};
@define-color surface {{colors.surface.default.hex}};
@define-color on_surface {{colors.on_surface.default.hex}};

@define-color primary {{colors.primary.default.hex}};
@define-color on_primary {{colors.on_primary.default.hex}};
@define-color primary_container {{colors.primary_container.default.hex}};
@define-color on_primary_container {{colors.on_primary_container.default.hex}};

@define-color secondary {{colors.secondary.default.hex}};
@define-color on_secondary {{colors.on_secondary.default.hex}};
@define-color secondary_container {{colors.secondary_container.default.hex}};

@define-color tertiary {{colors.tertiary.default.hex}};
@define-color on_tertiary {{colors.on_tertiary.default.hex}};

@define-color error {{colors.error.default.hex}};
@define-color on_error {{colors.on_error.default.hex}};

@define-color outline {{colors.outline.default.hex}};
@define-color surface_variant {{colors.surface_variant.default.hex}};
@define-color on_surface_variant {{colors.on_surface_variant.default.hex}};

/* Legacy color variables for compatibility */
@define-color color0 {{colors.surface.default.hex}};
@define-color color1 {{colors.error.default.hex}};
@define-color color2 {{colors.tertiary.default.hex}};
@define-color color3 {{colors.secondary.default.hex}};
@define-color color4 {{colors.primary.default.hex}};
@define-color color5 {{colors.primary_container.default.hex}};
#+end_src

** Foot Template
#+begin_src ini :tangle packages/matugen/.config/matugen/templates/foot.ini
# Generated by matugen

[colors]
foreground={{colors.on_background.default.hex_stripped}}
background={{colors.background.default.hex_stripped}}

regular0={{colors.surface.default.hex_stripped}}
regular1={{colors.error.default.hex_stripped}}
regular2={{colors.tertiary.default.hex_stripped}}
regular3={{colors.secondary.default.hex_stripped}}
regular4={{colors.primary.default.hex_stripped}}
regular5={{colors.primary_container.default.hex_stripped}}
regular6={{colors.secondary_container.default.hex_stripped}}
regular7={{colors.on_background.default.hex_stripped}}

bright0={{colors.surface_variant.default.hex_stripped}}
bright1={{colors.error.default.hex_stripped}}
bright2={{colors.tertiary.default.hex_stripped}}
bright3={{colors.secondary.default.hex_stripped}}
bright4={{colors.primary.default.hex_stripped}}
bright5={{colors.primary_container.default.hex_stripped}}
bright6={{colors.secondary_container.default.hex_stripped}}
bright7={{colors.on_surface.default.hex_stripped}}
#+end_src

** Mako Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/mako.conf
# Generated by matugen

background-color={{colors.surface.default.hex}}
text-color={{colors.on_surface.default.hex}}
border-color={{colors.primary.default.hex}}

[urgency=high]
border-color={{colors.error.default.hex}}
#+end_src

** Fuzzel Template
#+begin_src ini :tangle packages/matugen/.config/matugen/templates/fuzzel.ini
# Generated by matugen

[colors]
background={{colors.surface.default.hex}}ff
text={{colors.on_surface.default.hex}}ff
match={{colors.primary.default.hex}}ff
selection={{colors.primary_container.default.hex}}ff
selection-text={{colors.on_primary_container.default.hex}}ff
selection-match={{colors.primary.default.hex}}ff
border={{colors.primary.default.hex}}ff
#+end_src

** Networkmanager_dmenu Template
#+begin_src ini :tangle packages/matugen/.config/matugen/templates/networkmanager_dmenu.ini
# Generated by matugen - networkmanager_dmenu configuration

[dmenu_passphrase]
obscure_color = {{colors.primary.default.hex}}
#+end_src

** Qutebrowser Template
#+begin_src python :tangle packages/matugen/.config/matugen/templates/qutebrowser.py
# Generated by matugen - Qutebrowser colors
# This file is sourced by qutebrowser's config.py

# Color palette from matugen
bg = '{{colors.background.default.hex}}'
fg = '{{colors.on_background.default.hex}}'
primary = '{{colors.primary.default.hex}}'
on_primary = '{{colors.on_primary.default.hex}}'
primary_container = '{{colors.primary_container.default.hex}}'
on_primary_container = '{{colors.on_primary_container.default.hex}}'
secondary = '{{colors.secondary.default.hex}}'
on_secondary = '{{colors.on_secondary.default.hex}}'
secondary_container = '{{colors.secondary_container.default.hex}}'
on_secondary_container = '{{colors.on_secondary_container.default.hex}}'
tertiary = '{{colors.tertiary.default.hex}}'
on_tertiary = '{{colors.on_tertiary.default.hex}}'
tertiary_container = '{{colors.tertiary_container.default.hex}}'
on_tertiary_container = '{{colors.on_tertiary_container.default.hex}}'
surface = '{{colors.surface.default.hex}}'
on_surface = '{{colors.on_surface.default.hex}}'
surface_variant = '{{colors.surface_variant.default.hex}}'
on_surface_variant = '{{colors.on_surface_variant.default.hex}}'
surface_dim = '{{colors.surface_dim.default.hex}}'
error = '{{colors.error.default.hex}}'
on_error = '{{colors.on_error.default.hex}}'
outline = '{{colors.outline.default.hex}}'

# Completion (minimal - no alternating stripes, high contrast)
c.colors.completion.category.bg = surface_dim
c.colors.completion.category.border.bottom = outline
c.colors.completion.category.border.top = outline
c.colors.completion.category.fg = primary
c.colors.completion.even.bg = bg
c.colors.completion.odd.bg = bg
c.colors.completion.fg = fg
c.colors.completion.item.selected.bg = primary
c.colors.completion.item.selected.border.bottom = primary
c.colors.completion.item.selected.border.top = primary
c.colors.completion.item.selected.fg = on_primary
c.colors.completion.item.selected.match.fg = tertiary
c.colors.completion.match.fg = primary
c.colors.completion.scrollbar.bg = surface_variant
c.colors.completion.scrollbar.fg = primary

# Context menu
c.colors.contextmenu.disabled.bg = surface_dim
c.colors.contextmenu.disabled.fg = on_surface_variant
c.colors.contextmenu.menu.bg = surface
c.colors.contextmenu.menu.fg = on_surface
c.colors.contextmenu.selected.bg = primary
c.colors.contextmenu.selected.fg = on_primary

# Downloads
c.colors.downloads.bar.bg = surface
c.colors.downloads.error.bg = error
c.colors.downloads.error.fg = on_error
c.colors.downloads.start.bg = primary
c.colors.downloads.start.fg = on_primary
c.colors.downloads.stop.bg = tertiary
c.colors.downloads.stop.fg = on_tertiary

# Hints
c.colors.hints.bg = primary
c.colors.hints.fg = on_primary
c.colors.hints.match.fg = on_primary

# Keyhints
c.colors.keyhint.bg = surface
c.colors.keyhint.fg = on_surface
c.colors.keyhint.suffix.fg = primary

# Messages
c.colors.messages.error.bg = error
c.colors.messages.error.border = error
c.colors.messages.error.fg = on_error
c.colors.messages.info.bg = primary
c.colors.messages.info.border = primary
c.colors.messages.info.fg = on_primary
c.colors.messages.warning.bg = secondary
c.colors.messages.warning.border = secondary
c.colors.messages.warning.fg = on_secondary

# Prompts
c.colors.prompts.bg = surface
c.colors.prompts.border = outline
c.colors.prompts.fg = on_surface
c.colors.prompts.selected.bg = primary
c.colors.prompts.selected.fg = on_primary

# Statusbar (proper contrast for all modes)
c.colors.statusbar.caret.bg = primary
c.colors.statusbar.caret.fg = on_primary
c.colors.statusbar.caret.selection.bg = primary
c.colors.statusbar.caret.selection.fg = on_primary
c.colors.statusbar.command.bg = bg
c.colors.statusbar.command.fg = fg
c.colors.statusbar.command.private.bg = surface_dim
c.colors.statusbar.command.private.fg = fg
c.colors.statusbar.insert.bg = tertiary_container
c.colors.statusbar.insert.fg = on_tertiary_container
c.colors.statusbar.normal.bg = bg
c.colors.statusbar.normal.fg = fg
c.colors.statusbar.passthrough.bg = secondary
c.colors.statusbar.passthrough.fg = on_secondary
c.colors.statusbar.private.bg = surface_dim
c.colors.statusbar.private.fg = fg
c.colors.statusbar.progress.bg = primary
c.colors.statusbar.url.error.fg = error
c.colors.statusbar.url.fg = fg
c.colors.statusbar.url.hover.fg = primary
c.colors.statusbar.url.success.http.fg = fg
c.colors.statusbar.url.success.https.fg = fg
c.colors.statusbar.url.warn.fg = on_secondary_container

# Tabs (matches Hyprland border colors)
c.colors.tabs.bar.bg = surface_dim
c.colors.tabs.even.bg = bg
c.colors.tabs.even.fg = fg
c.colors.tabs.indicator.error = error
c.colors.tabs.indicator.start = primary
c.colors.tabs.indicator.stop = tertiary
c.colors.tabs.odd.bg = bg
c.colors.tabs.odd.fg = fg
c.colors.tabs.pinned.even.bg = surface_variant
c.colors.tabs.pinned.even.fg = on_surface
c.colors.tabs.pinned.odd.bg = surface_variant
c.colors.tabs.pinned.odd.fg = on_surface
c.colors.tabs.pinned.selected.even.bg = primary
c.colors.tabs.pinned.selected.even.fg = on_primary
c.colors.tabs.pinned.selected.odd.bg = primary
c.colors.tabs.pinned.selected.odd.fg = on_primary
c.colors.tabs.selected.even.bg = primary
c.colors.tabs.selected.even.fg = on_primary
c.colors.tabs.selected.odd.bg = primary
c.colors.tabs.selected.odd.fg = on_primary

# Webpage colors (respects site preferences, but provides fallback)
c.colors.webpage.bg = bg
# Convert mode to lowercase (matugen outputs "Dark"/"Light", qutebrowser needs "dark"/"light")
mode = '{{mode}}'
c.colors.webpage.preferred_color_scheme = mode.lower()
# Enable darkmode based on matugen theme
c.colors.webpage.darkmode.enabled = (mode.lower() == 'dark')
#+end_src

** Qutebrowser Start-page Template
#+begin_src html :tangle packages/matugen/.config/matugen/templates/qutebrowser-startpage.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Start</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: monospace;
            background-color: {{colors.background.default.hex}};
            color: {{colors.on_background.default.hex}};
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .container {
            text-align: center;
            width: 100%;
            max-width: 600px;
            padding: 2rem;
        }

        h1 {
            color: {{colors.primary.default.hex}};
            font-size: 2rem;
            margin-bottom: 2rem;
            font-weight: normal;
        }

        form {
            width: 100%;
        }

        input[type="search"] {
            width: 100%;
            padding: 1rem 1.5rem;
            font-size: 1rem;
            font-family: monospace;
            background-color: {{colors.surface.default.hex}};
            color: {{colors.on_surface.default.hex}};
            border: 2px solid {{colors.outline.default.hex}};
            border-radius: 0;
            outline: none;
            transition: border-color 0.2s;
        }

        input[type="search"]:focus {
            border-color: {{colors.primary.default.hex}};
        }

        input[type="search"]::placeholder {
            color: {{colors.on_surface_variant.default.hex}};
        }
    </style>
    <script>
        function handleSearch(event) {
            event.preventDefault();
            const query = document.getElementById('search-input').value.trim();
            if (query) {
                window.location.href = 'https://duckduckgo.com/?q=' + encodeURIComponent(query);
            }
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>~</h1>
        <form onsubmit="handleSearch(event)">
            <input type="search" id="search-input" placeholder="search" autofocus autocomplete="off">
        </form>
    </div>
</body>
</html>
#+end_src

** GTK Template
#+begin_src css :tangle packages/matugen/.config/matugen/templates/gtk.css
/* Generated by matugen - GTK 3.0/4.0 theme */

/* Base colors */
@define-color theme_bg_color {{colors.background.default.hex}};
@define-color theme_fg_color {{colors.on_background.default.hex}};
@define-color theme_base_color {{colors.surface.default.hex}};
@define-color theme_text_color {{colors.on_surface.default.hex}};
@define-color theme_selected_bg_color {{colors.primary.default.hex}};
@define-color theme_selected_fg_color {{colors.on_primary.default.hex}};

/* Material You colors */
@define-color background {{colors.background.default.hex}};
@define-color foreground {{colors.on_background.default.hex}};
@define-color surface {{colors.surface.default.hex}};
@define-color on_surface {{colors.on_surface.default.hex}};
@define-color surface_variant {{colors.surface_variant.default.hex}};
@define-color on_surface_variant {{colors.on_surface_variant.default.hex}};

@define-color primary {{colors.primary.default.hex}};
@define-color on_primary {{colors.on_primary.default.hex}};
@define-color primary_container {{colors.primary_container.default.hex}};
@define-color on_primary_container {{colors.on_primary_container.default.hex}};

@define-color secondary {{colors.secondary.default.hex}};
@define-color on_secondary {{colors.on_secondary.default.hex}};
@define-color secondary_container {{colors.secondary_container.default.hex}};
@define-color on_secondary_container {{colors.on_secondary_container.default.hex}};

@define-color tertiary {{colors.tertiary.default.hex}};
@define-color on_tertiary {{colors.on_tertiary.default.hex}};
@define-color tertiary_container {{colors.tertiary_container.default.hex}};
@define-color on_tertiary_container {{colors.on_tertiary_container.default.hex}};

@define-color error {{colors.error.default.hex}};
@define-color on_error {{colors.on_error.default.hex}};
@define-color error_container {{colors.error_container.default.hex}};
@define-color on_error_container {{colors.on_error_container.default.hex}};

@define-color outline {{colors.outline.default.hex}};
@define-color outline_variant {{colors.outline_variant.default.hex}};

/* Legacy GTK color definitions */
@define-color insensitive_bg_color {{colors.surface_variant.default.hex}};
@define-color insensitive_fg_color {{colors.on_surface_variant.default.hex}};
@define-color insensitive_base_color {{colors.surface_dim.default.hex}};
@define-color borders {{colors.outline.default.hex}};
@define-color warning_color {{colors.tertiary.default.hex}};
@define-color error_color {{colors.error.default.hex}};
@define-color success_color {{colors.tertiary.default.hex}};

/* Widget styling */
. * {
    outline-color: @primary;
    outline-width: 2px;
    outline-offset: -2px;
}

window {
    background-color: @background;
    color: @foreground;
}

/* Buttons */
button {
    background-color: @surface;
    color: @on_surface;
    border: 1px solid @outline;
    border-radius: 4px;
    padding: 6px 12px;
}

button:hover {
    background-color: @surface_variant;
}

button:active,
button:checked {
    background-color: @primary;
    color: @on_primary;
    border-color: @primary;
}

button:disabled {
    background-color: @insensitive_bg_color;
    color: @insensitive_fg_color;
    border-color: @outline_variant;
}

/* Entries */
entry {
    background-color: @surface;
    color: @on_surface;
    border: 1px solid @outline;
    border-radius: 4px;
    padding: 6px;
}

entry:focus {
    border-color: @primary;
}

entry:disabled {
    background-color: @insensitive_bg_color;
    color: @insensitive_fg_color;
}

/* Selections */
selection {
    background-color: @primary;
    color: @on_primary;
}

/* Menus */
menubar,
menu {
    background-color: @surface;
    color: @on_surface;
    border: 1px solid @outline;
}

menuitem {
    padding: 6px;
}

menuitem:hover {
    background-color: @primary_container;
    color: @on_primary_container;
}

/* Scrollbars */
scrollbar slider {
    background-color: @surface_variant;
    border: 1px solid @outline;
    border-radius: 4px;
}

scrollbar slider:hover {
    background-color: @primary;
}

/* Headerbars */
headerbar {
    background-color: @surface;
    color: @on_surface;
    border-bottom: 1px solid @outline;
}

/* Tooltips */
tooltip {
    background-color: @surface_variant;
    color: @on_surface_variant;
    border: 1px solid @outline;
    border-radius: 4px;
}

/* Notebooks/Tabs */
notebook > header {
    background-color: @surface;
    border-bottom: 1px solid @outline;
}

notebook > header > tabs > tab {
    padding: 8px 16px;
    color: @on_surface_variant;
}

notebook > header > tabs > tab:checked {
    background-color: @primary_container;
    color: @on_primary_container;
    border-bottom: 2px solid @primary;
}

/* Lists and Trees */
list,
treeview {
    background-color: @surface;
    color: @on_surface;
}

list > row:selected,
treeview:selected {
    background-color: @primary;
    color: @on_primary;
}

list > row:hover,
treeview:hover {
    background-color: @surface_variant;
}
#+end_src

** Qt6ct Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/qt6ct.conf
# Generated by matugen - Qt6ct color scheme

[ColorScheme]
active_colors={{colors.on_background.default.hex}}, {{colors.surface.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_primary.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.background.default.hex}}, {{colors.surface.default.hex}}, {{colors.outline.default.hex}}, {{colors.primary.default.hex}}, {{colors.on_primary.default.hex}}, {{colors.primary.default.hex}}, {{colors.tertiary.default.hex}}, {{colors.surface.default.hex}}, {{colors.on_background.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface.default.hex}}
disabled_colors={{colors.on_surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}
inactive_colors={{colors.on_background.default.hex}}, {{colors.surface.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.background.default.hex}}, {{colors.surface.default.hex}}, {{colors.outline.default.hex}}, {{colors.primary_container.default.hex}}, {{colors.on_primary_container.default.hex}}, {{colors.primary.default.hex}}, {{colors.tertiary.default.hex}}, {{colors.surface.default.hex}}, {{colors.on_background.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface.default.hex}}
#+end_src

** Qt5ct Template
#+begin_src conf :tangle packages/matugen/.config/matugen/templates/qt5ct.conf
# Generated by matugen - Qt5ct color scheme

[ColorScheme]
active_colors={{colors.on_background.default.hex}}, {{colors.surface.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_primary.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.background.default.hex}}, {{colors.surface.default.hex}}, {{colors.outline.default.hex}}, {{colors.primary.default.hex}}, {{colors.on_primary.default.hex}}, {{colors.primary.default.hex}}, {{colors.tertiary.default.hex}}, {{colors.surface.default.hex}}, {{colors.on_background.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface.default.hex}}
disabled_colors={{colors.on_surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface_variant.default.hex}}
inactive_colors={{colors.on_background.default.hex}}, {{colors.surface.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.surface_dim.default.hex}}, {{colors.outline.default.hex}}, {{colors.outline_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.background.default.hex}}, {{colors.surface.default.hex}}, {{colors.outline.default.hex}}, {{colors.primary_container.default.hex}}, {{colors.on_primary_container.default.hex}}, {{colors.primary.default.hex}}, {{colors.tertiary.default.hex}}, {{colors.surface.default.hex}}, {{colors.on_background.default.hex}}, {{colors.surface_variant.default.hex}}, {{colors.on_surface.default.hex}}, {{colors.on_surface_variant.default.hex}}, {{colors.on_surface.default.hex}}
#+end_src

#+RESULTS:

** Waybar Update Checker Script
#+begin_src bash :tangle packages/matugen/.local/bin/waybar-updates :shebang "#!/usr/bin/env bash"
# Check for Arch and AUR updates
# Returns JSON for waybar

set -euo pipefail

# Count official repo updates
official_updates=$(checkupdates 2>/dev/null | wc -l)

# Count AUR updates (yay/paru exit 1 when no updates, handle it)
if command -v yay &>/dev/null; then
    aur_updates=$( (yay -Qua 2>/dev/null || true) | wc -l)
elif command -v paru &>/dev/null; then
    aur_updates=$( (paru -Qua 2>/dev/null || true) | wc -l)
else
    aur_updates=0
fi

# Calculate total
total_updates=$((official_updates + aur_updates))

if [ "$total_updates" -gt 0 ]; then
    # Build tooltip
    tooltip="Updates available:\n"
    tooltip+="Official: $official_updates\n"
    tooltip+="AUR: $aur_updates"

    # Return JSON
    echo "{\"text\":\"󰚰\",\"tooltip\":\"$tooltip\",\"class\":\"updates\"}"
else
    # No updates
    echo "{\"text\":\"\",\"tooltip\":\"System is up to date\",\"class\":\"no-updates\"}"
fi
#+end_src

** Waybar Smart Dual Battery Script
#+begin_src bash :tangle packages/matugen/.local/bin/waybar-battery :shebang "#!/usr/bin/env bash"
# Smart dual battery indicator for Lenovo T480
# Combines BAT0 (internal, 24Wh) and BAT1 (external, 72Wh) into single percentage
# Returns JSON for waybar

set -euo pipefail

# Battery capacities in Wh (adjust these to match your actual batteries)
BAT0_CAPACITY=24  # Internal battery capacity in Wh
BAT1_CAPACITY=72  # External battery capacity in Wh
TOTAL_CAPACITY=$((BAT0_CAPACITY + BAT1_CAPACITY))

# Read battery info
BAT0_PATH="/sys/class/power_supply/BAT0"
BAT1_PATH="/sys/class/power_supply/BAT1"
AC_PATH="/sys/class/power_supply/AC"

# Check if batteries exist
if [[ ! -d "$BAT0_PATH" || ! -d "$BAT1_PATH" ]]; then
    echo "{\"text\":\"󰂑\",\"tooltip\":\"Battery not found\",\"class\":\"missing\"}"
    exit 0
fi

# Read battery percentages
bat0_percent=$(cat "$BAT0_PATH/capacity" 2>/dev/null || echo "0")
bat1_percent=$(cat "$BAT1_PATH/capacity" 2>/dev/null || echo "0")

# Read battery status
bat0_status=$(cat "$BAT0_PATH/status" 2>/dev/null || echo "Unknown")
bat1_status=$(cat "$BAT1_PATH/status" 2>/dev/null || echo "Unknown")

# Read AC status
ac_online=$(cat "$AC_PATH/online" 2>/dev/null || echo "0")

# Calculate energy remaining in Wh
bat0_energy=$(awk "BEGIN {printf \"%.1f\", $bat0_percent * $BAT0_CAPACITY / 100}")
bat1_energy=$(awk "BEGIN {printf \"%.1f\", $bat1_percent * $BAT1_CAPACITY / 100}")
total_energy=$(awk "BEGIN {printf \"%.1f\", $bat0_energy + $bat1_energy}")

# Calculate combined percentage
combined_percent=$(awk "BEGIN {printf \"%d\", ($total_energy / $TOTAL_CAPACITY) * 100}")

# Determine charging state
if [[ "$ac_online" == "1" ]]; then
    if [[ "$bat0_status" == "Charging" || "$bat1_status" == "Charging" ]]; then
        charging=true
        state="Charging"
    elif [[ "$bat0_status" == "Full" && "$bat1_status" == "Full" ]]; then
        charging=false
        state="Full"
    else
        charging=false
        state="Plugged"
    fi
else
    charging=false
    state="Discharging"
fi

# Select icon based on combined percentage and charging state
if [[ "$charging" == true ]]; then
    if [[ $combined_percent -ge 90 ]]; then icon="󰂅"
    elif [[ $combined_percent -ge 80 ]]; then icon="󰂋"
    elif [[ $combined_percent -ge 70 ]]; then icon="󰂊"
    elif [[ $combined_percent -ge 60 ]]; then icon="󰢞"
    elif [[ $combined_percent -ge 50 ]]; then icon="󰂉"
    elif [[ $combined_percent -ge 40 ]]; then icon="󰢝"
    elif [[ $combined_percent -ge 30 ]]; then icon="󰂈"
    elif [[ $combined_percent -ge 20 ]]; then icon="󰂇"
    elif [[ $combined_percent -ge 10 ]]; then icon="󰂆"
    else icon="󰢜"
    fi
elif [[ "$state" == "Full" ]]; then
    icon="󰂅"
elif [[ "$state" == "Plugged" ]]; then
    icon=""
else
    if [[ $combined_percent -ge 90 ]]; then icon="󰁹"
    elif [[ $combined_percent -ge 80 ]]; then icon="󰂂"
    elif [[ $combined_percent -ge 70 ]]; then icon="󰂁"
    elif [[ $combined_percent -ge 60 ]]; then icon="󰂀"
    elif [[ $combined_percent -ge 50 ]]; then icon="󰁿"
    elif [[ $combined_percent -ge 40 ]]; then icon="󰁾"
    elif [[ $combined_percent -ge 30 ]]; then icon="󰁽"
    elif [[ $combined_percent -ge 20 ]]; then icon="󰁼"
    elif [[ $combined_percent -ge 10 ]]; then icon="󰁻"
    else icon="󰁺"
    fi
fi

# Determine CSS class for styling
if [[ $combined_percent -le 10 ]]; then
    class="critical"
elif [[ $combined_percent -le 20 ]]; then
    class="warning"
elif [[ "$charging" == true ]]; then
    class="charging"
else
    class="normal"
fi

# Build tooltip
tooltip="Combined: ${combined_percent}% (${total_energy}Wh)\n"
tooltip+="BAT1 (External): ${bat1_percent}% (${bat1_energy}Wh) - ${bat1_status}\n"
tooltip+="BAT0 (Internal): ${bat0_percent}% (${bat0_energy}Wh) - ${bat0_status}\n"
tooltip+="Status: ${state}"

# Return JSON
echo "{\"text\":\"${icon}\",\"tooltip\":\"${tooltip}\",\"class\":\"${class}\",\"percentage\":${combined_percent}}"
#+end_src

** Waybar Pomodoro Timer Script
#+begin_src bash :tangle packages/matugen/.local/bin/waybar-pomodoro :shebang "#!/usr/bin/env bash"
# Minimal pomodoro timer for waybar
# Left click: toggle (start/pause), Right click: reset

set -euo pipefail

STATE_FILE="${XDG_RUNTIME_DIR:-/tmp}/waybar-pomodoro-state"
WORK_TIME=1500    # 25 minutes in seconds
BREAK_TIME=300    # 5 minutes in seconds

# Initialize state file if it doesn't exist
if [[ ! -f "$STATE_FILE" ]]; then
    echo "idle" > "$STATE_FILE"
    echo "0" >> "$STATE_FILE"
    echo "$WORK_TIME" >> "$STATE_FILE"
fi

# Read current state
{
    read -r state
    read -r start_time
    read -r remaining
} < "$STATE_FILE"

# Handle commands
case "${1:-}" in
    toggle)
        if [[ "$state" == "idle" ]]; then
            # Start work session
            echo "work" > "$STATE_FILE"
            echo "$(date +%s)" >> "$STATE_FILE"
            echo "$WORK_TIME" >> "$STATE_FILE"
        elif [[ "$state" == "work" ]] || [[ "$state" == "break" ]]; then
            # Pause
            now=$(date +%s)
            elapsed=$((now - start_time))
            remaining=$((remaining - elapsed))
            if [[ $remaining -lt 0 ]]; then
                remaining=0
            fi
            echo "paused" > "$STATE_FILE"
            echo "$now" >> "$STATE_FILE"
            echo "$remaining" >> "$STATE_FILE"
        elif [[ "$state" == "paused" ]]; then
            # Resume
            mode="work"
            if [[ $remaining -le 0 ]]; then
                mode="break"
                remaining=$BREAK_TIME
            fi
            echo "$mode" > "$STATE_FILE"
            echo "$(date +%s)" >> "$STATE_FILE"
            echo "$remaining" >> "$STATE_FILE"
        fi
        exit 0
        ;;
    reset)
        echo "idle" > "$STATE_FILE"
        echo "0" >> "$STATE_FILE"
        echo "$WORK_TIME" >> "$STATE_FILE"
        exit 0
        ;;
esac

# Calculate remaining time
if [[ "$state" == "work" ]] || [[ "$state" == "break" ]]; then
    now=$(date +%s)
    elapsed=$((now - start_time))
    remaining=$((remaining - elapsed))

    # Check if timer finished
    if [[ $remaining -le 0 ]]; then
        # Auto-switch to break or work
        if [[ "$state" == "work" ]]; then
            # Send notification
            notify-send "Pomodoro" "Work session complete! Take a break." -u normal
            echo "break" > "$STATE_FILE"
            echo "$(date +%s)" >> "$STATE_FILE"
            echo "$BREAK_TIME" >> "$STATE_FILE"
            remaining=$BREAK_TIME
            state="break"
        else
            notify-send "Pomodoro" "Break over! Ready for work?" -u normal
            echo "idle" > "$STATE_FILE"
            echo "0" >> "$STATE_FILE"
            echo "$WORK_TIME" >> "$STATE_FILE"
            remaining=0
            state="idle"
        fi
    fi
fi

# Format time display
minutes=$((remaining / 60))
seconds=$((remaining % 60))
time_str=$(printf "%02d:%02d" $minutes $seconds)

# Determine icon and class
case "$state" in
    work)
        icon="󰔟"  # Focus icon
        class="work"
        tooltip="Work session: $time_str"
        text="$time_str"
        ;;
    break)
        icon="󰾩"  # Coffee icon
        class="break"
        tooltip="Break time: $time_str"
        text="$time_str"
        ;;
    paused)
        icon="󰏤"  # Pause icon
        class="paused"
        tooltip="Paused: $time_str"
        text="$time_str"
        ;;
    idle|*)
        icon="󱫐"  # Timer icon
        class="idle"
        tooltip="Pomodoro (click to start)"
        text=""
        ;;
esac

# Output JSON for waybar
echo "{\"text\":\"$text\",\"tooltip\":\"$tooltip\",\"class\":\"$class\",\"alt\":\"$icon\"}"
#+end_src

** Mako Actions Fuzzel Menu
#+begin_src bash :tangle packages/matugen/.local/bin/mako-actions :shebang "#!/usr/bin/env bash"
# Interactive fuzzel menu for mako notification actions
# Supports both quick actions and per-notification action selection

set -euo pipefail

# Check if mako is running
if ! pgrep -x mako >/dev/null; then
    notify-send "Mako" "Mako notification daemon is not running"
    exit 1
fi

# Function to get list of notifications with IDs and summaries
get_notifications() {
    local list_output
    list_output=$(makoctl list 2>/dev/null)

    if [[ -z "$list_output" ]]; then
        return 1
    fi

    # Parse output: "Notification 123: Summary text"
    # Format for display: "123: Summary text (App name)"
    echo "$list_output" | awk '
        /^Notification [0-9]+:/ {
            match($0, /Notification ([0-9]+): (.+)/, arr)
            notif_id = arr[1]
            summary = arr[2]
            getline  # Get "App name: ..." line
            if (/App name:/) {
                match($0, /App name: (.+)/, arr2)
                app = arr2[1]
                printf "%s: %s (%s)\n", notif_id, summary, app
            }
        }
    '
}

# Get latest notification ID and summary
latest_notif_info=$(makoctl list 2>/dev/null | head -2)
latest_notif_id=""
latest_notif_summary=""

if [[ -n "$latest_notif_info" ]]; then
    latest_notif_id=$(echo "$latest_notif_info" | head -1 | grep -oP 'Notification \K\d+')
    latest_notif_summary=$(echo "$latest_notif_info" | head -1 | sed -E 's/^Notification [0-9]+: //')
fi

# Build menu dynamically
actions=()

# If there's a latest notification, get its actions and add to menu
if [[ -n "$latest_notif_id" ]]; then
    # Get actions for latest notification
    latest_actions=$(makoctl list 2>/dev/null | awk -v id="$latest_notif_id" '
        /^Notification [0-9]+:/ {
            match($0, /Notification ([0-9]+)/, arr)
            if (arr[1] == id) {
                in_notif = 1
            } else {
                in_notif = 0
            }
            next
        }
        in_notif && /^  Actions:/ {
            in_actions = 1
            next
        }
        in_notif && in_actions && /^    [a-zA-Z0-9_-]+:/ {
            match($0, /^    ([^:]+): (.+)/, arr)
            print arr[1] "|" arr[2]
        }
        in_notif && in_actions && /^[^ ]/ {
            exit
        }
    ')

    if [[ -n "$latest_actions" ]]; then
        actions+=("Latest: $latest_notif_summary")
        while IFS='|' read -r action_id action_label; do
            actions+=("  󰜎 $action_label")
        done <<< "$latest_actions"
        actions+=("───────────────────────")
    fi
fi

# Add standard menu options
actions+=(
    " Choose notification and action"
    "───────────────────────"
    "󰵅 Invoke default action (latest)"
    "󰎟 Dismiss latest"
    "󰎟 Dismiss all"
    "󰁯 Restore last dismissed"
)

# Show main menu
selected=$(printf '%s\n' "${actions[@]}" | fuzzel --dmenu --width 50 --placeholder "Notification Actions")

# Exit if nothing selected or separator selected
[[ -z "$selected" ]] && exit 0
[[ "$selected" == "───────────────────────" ]] && exit 0
[[ "$selected" =~ ^Latest: ]] && exit 0  # Header, not selectable

# Check if it's a latest notification action
if [[ "$selected" =~ ^"  󰜎 " ]]; then
    # Extract action label and find corresponding action ID
    action_label=$(echo "$selected" | sed 's/^  󰜎 //')
    action_id=$(echo "$latest_actions" | grep -F "|$action_label" | cut -d'|' -f1)

    if [[ -n "$action_id" ]]; then
        makoctl invoke -n "$latest_notif_id" "$action_id"
    fi
    exit 0
fi

# Handle other selections
case "$selected" in
    " Choose notification and action")
        # Get list of notifications
        notif_list=$(get_notifications)

        if [[ -z "$notif_list" ]]; then
            notify-send "Mako" "No notifications available"
            exit 0
        fi

        # Show notification picker
        selected_notif=$(echo "$notif_list" | fuzzel --dmenu --width 60 --placeholder "Select Notification")

        [[ -z "$selected_notif" ]] && exit 0

        # Extract notification ID (first field before colon)
        notif_id=$(echo "$selected_notif" | cut -d: -f1)

        # Use makoctl menu to let user select and invoke action
        if ! makoctl menu -n "$notif_id" -- fuzzel --dmenu --width 50 --placeholder "Choose Action"; then
            # If no action was selected or notification has no actions
            notify-send "Mako" "No action selected or notification has no actions"
        fi
        ;;
    "󰵅 Invoke default action (latest)")
        makoctl invoke
        ;;
    "󰎟 Dismiss latest")
        makoctl dismiss
        ;;
    "󰎟 Dismiss all")
        makoctl dismiss --all
        ;;
    "󰁯 Restore last dismissed")
        makoctl restore
        ;;
esac
#+end_src

** Bitwarden Fuzzel Script
#+begin_src bash :tangle packages/matugen/.local/bin/bitwarden-fuzzel :shebang "#!/usr/bin/env bash"
# Simple Bitwarden password manager with fuzzel
# Requires: bitwarden-cli, jq, wl-clipboard, wtype, fuzzel

set -euo pipefail

# Session and cache files (persistent across script invocations)
SESSION_FILE="${XDG_RUNTIME_DIR:-/tmp}/bw_session"
CACHE_FILE="${XDG_RUNTIME_DIR:-/tmp}/bw_cache"

# Don't cleanup session file on exit - keep it for next run
# Session will be cleared by hypridle on screen lock

# Check if logged in
if ! bw login --check &>/dev/null; then
    notify-send "Bitwarden" "Not logged in. Run: bw login in terminal" -u critical
    exit 1
fi

# Get or create session
get_session() {
    # Try to load existing session from file
    if [ -f "$SESSION_FILE" ]; then
        cat "$SESSION_FILE"
        return 0
    fi

    # Need to unlock - prompt for password
    password=$(echo "" | fuzzel --dmenu --password --lines 0 --placeholder "Enter Bitwarden Master Password..." --width 50)
    [ -z "$password" ] && exit 0

    # Unlock and get session key
    session=$(echo "$password" | bw unlock --raw 2>/dev/null)

    # Check if unlock was successful
    if [ -z "$session" ]; then
        notify-send "Bitwarden" "Failed to unlock vault - invalid password?" -u critical
        exit 1
    fi

    # Save session to file
    echo "$session" > "$SESSION_FILE"
    chmod 600 "$SESSION_FILE"

    echo "$session"
}

# Get session
BW_SESSION=$(get_session)
export BW_SESSION

# Try to use cached items first (cache persists until lock/suspend)
use_cache=false
if [ -f "$CACHE_FILE" ]; then
    items=$(cat "$CACHE_FILE")
    use_cache=true
fi

# If no cache, fetch from vault
if [ "$use_cache" = false ]; then
    # Show loading notification
    notify-send "Bitwarden" "Loading vault..." -t 2000 -u low &
    NOTIFY_PID=$!

    # Get all items (with error handling for invalid session)
    items=$(bw list items --session "$BW_SESSION" 2>/dev/null)

    # Close loading notification
    kill $NOTIFY_PID 2>/dev/null || true

    # If items fetch failed, session is invalid - remove it and retry once
    if [ -z "$items" ] || [ "$items" = "null" ]; then
        rm -f "$SESSION_FILE" "$CACHE_FILE"
        notify-send "Bitwarden" "Session expired, please unlock again" -u normal
        exec "$0"  # Restart the script
    fi

    # Save to cache for next time
    echo "$items" > "$CACHE_FILE"
    chmod 600 "$CACHE_FILE"
fi

# Build selection menu with "New Entry" and "Sync Vault" options
selection="➕ New Entry\n🔄 Sync Vault"
if [ -n "$items" ] && [ "$items" != "[]" ]; then
    login_items=$(echo "$items" | jq -r '
        .[] |
        select(.login != null) |
        .name + " | " + (.login.username // "no username")
    ')
    [ -n "$login_items" ] && selection="$selection\n$login_items"
fi

# Select item
chosen=$(echo -e "$selection" | fuzzel --dmenu --placeholder "Type to search..." --width 70 --lines 15)
[ -z "$chosen" ] && exit 0

# Handle sync vault
if [ "$chosen" = "🔄 Sync Vault" ]; then
    # Sync with server
    notify-send "Bitwarden" "Syncing with server..." -t 2000 -u low &
    NOTIFY_PID=$!

    bw sync --session "$BW_SESSION" >/dev/null 2>&1
    sync_result=$?

    kill $NOTIFY_PID 2>/dev/null || true

    if [ $sync_result -eq 0 ]; then
        # Clear cache and re-fetch
        rm -f "$CACHE_FILE"

        notify-send "Bitwarden" "Fetching updated vault..." -t 2000 -u low &
        NOTIFY_PID=$!

        items=$(bw list items --session "$BW_SESSION" 2>/dev/null)

        kill $NOTIFY_PID 2>/dev/null || true

        if [ -n "$items" ] && [ "$items" != "null" ]; then
            echo "$items" > "$CACHE_FILE"
            chmod 600 "$CACHE_FILE"
            notify-send "Bitwarden" "Vault synced successfully" -t 1500 -u low
            # Reopen the menu after successful sync
            exec "$0"
        else
            notify-send "Bitwarden" "Failed to fetch updated vault" -u critical
            exit 1
        fi
    else
        notify-send "Bitwarden" "Sync failed" -u critical
        exit 1
    fi
fi

# Handle new entry creation
if [ "$chosen" = "➕ New Entry" ]; then
    # Get entry details
    name=$(echo "" | fuzzel --dmenu --placeholder "Entry Name..." --width 50)
    [ -z "$name" ] && exit 0

    username=$(echo "" | fuzzel --dmenu --placeholder "Username..." --width 50)
    [ -z "$username" ] && exit 0

    password=$(echo "" | fuzzel --dmenu --password --placeholder "Password (leave empty to generate)..." --width 50)

    # Generate password if empty
    if [ -z "$password" ]; then
        password=$(bw generate --length 20 --uppercase --lowercase --number --special --session "$BW_SESSION" 2>/dev/null)
        if [ -n "$password" ]; then
            echo -n "$password" | wl-copy
            notify-send "Bitwarden" "Generated password copied to clipboard"
        else
            notify-send "Bitwarden" "Failed to generate password" -u critical
            exit 1
        fi
    fi

    uri=$(echo "" | fuzzel --dmenu --placeholder "Website URL (optional)..." --width 50)

    # Build JSON template using jq to properly escape values
    template=$(jq -n \
        --arg name "$name" \
        --arg username "$username" \
        --arg password "$password" \
        --arg uri "$uri" \
        '{
            organizationId: null,
            folderId: null,
            type: 1,
            name: $name,
            notes: null,
            favorite: false,
            fields: [],
            login: {
                uris: (if $uri != "" then [{"match": null, "uri": $uri}] else [] end),
                username: $username,
                password: $password,
                totp: null
            }
        }')

    # Create entry
    encoded=$(echo "$template" | bw encode)
    result=$(bw create item "$encoded" --session "$BW_SESSION" 2>&1)

    if echo "$result" | jq -e '.id' >/dev/null 2>&1; then
        notify-send "Bitwarden" "Entry '$name' created successfully"
        # Sync to server
        bw sync --session "$BW_SESSION" >/dev/null 2>&1
        # Clear cache so next run fetches updated vault
        rm -f "$CACHE_FILE"
    else
        # Show the actual error message
        error_msg=$(echo "$result" | head -1)
        notify-send "Bitwarden" "Failed: $error_msg" -u critical
    fi
    exit 0
fi

# Get item name from selection
item_name=$(echo "$chosen" | cut -d'|' -f1 | xargs)

# Get item details
item=$(echo "$items" | jq -r --arg name "$item_name" '.[] | select(.name == $name)')
item_id=$(echo "$item" | jq -r '.id')
username=$(echo "$item" | jq -r '.login.username // ""')
password=$(echo "$item" | jq -r '.login.password // ""')
totp=$(echo "$item" | jq -r '.login.totp // ""')

# Build actions menu
actions=""
[ -n "$username" ] && actions+="Copy Username\n"
[ -n "$password" ] && actions+="Copy Password\n"
[ -n "$username" ] && [ -n "$password" ] && actions+="Type Username + Tab + Password\n"
[ -n "$username" ] && actions+="Type Username\n"
[ -n "$password" ] && actions+="Type Password\n"
[ -n "$totp" ] && actions+="Copy TOTP Code\n"
actions+="🗑️ Delete Entry\n"

if [ -z "$actions" ]; then
    notify-send "Bitwarden" "No credentials found" -u normal
    exit 0
fi

# Show action menu
action=$(echo -e "${actions%\\n}" | fuzzel --dmenu --placeholder "Choose an action..." --width 50)
[ -z "$action" ] && exit 0

# Perform action
case "$action" in
    "Copy Username")
        echo -n "$username" | wl-copy
        notify-send "Bitwarden" "Username copied"
        ;;
    "Copy Password")
        echo -n "$password" | wl-copy
        notify-send "Bitwarden" "Password copied (clears in 45s)"
        (sleep 45 && wl-copy --clear) &
        ;;
    "Type Username + Tab + Password")
        sleep 0.3
        wtype "$username"
        wtype -k Tab
        sleep 0.1
        wtype "$password"
        notify-send "Bitwarden" "Credentials typed"
        ;;
    "Type Username")
        sleep 0.3
        wtype "$username"
        notify-send "Bitwarden" "Username typed"
        ;;
    "Type Password")
        sleep 0.3
        wtype "$password"
        notify-send "Bitwarden" "Password typed"
        ;;
    "Copy TOTP Code")
        totp_code=$(bw get totp "$item_name" --session "$BW_SESSION" 2>/dev/null)
        if [ -n "$totp_code" ]; then
            echo -n "$totp_code" | wl-copy
            notify-send "Bitwarden" "TOTP copied (clears in 30s)"
            (sleep 30 && wl-copy --clear) &
        else
            notify-send "Bitwarden" "Failed to get TOTP" -u normal
        fi
        ;;
    "🗑️ Delete Entry")
        # Verify we have a valid item ID
        if [ -z "$item_id" ] || [ "$item_id" = "null" ]; then
            notify-send "Bitwarden" "Error: Could not find item ID" -u critical
            exit 1
        fi

        # Confirm deletion
        confirm=$(echo -e "Cancel\nDelete" | fuzzel --dmenu --placeholder "Delete '$item_name'?" --width 50)
        if [ "$confirm" = "Delete" ]; then
            # Show deleting notification
            notify-send "Bitwarden" "Deleting '$item_name'..." -t 2000 -u low &
            NOTIFY_PID=$!

            result=$(bw delete item "$item_id" --session "$BW_SESSION" 2>&1)
            delete_status=$?

            kill $NOTIFY_PID 2>/dev/null || true

            if [ $delete_status -eq 0 ]; then
                # Sync to server
                bw sync --session "$BW_SESSION" >/dev/null 2>&1
                # Clear cache so next run fetches updated vault
                rm -f "$CACHE_FILE"
                # Success notification
                notify-send "Bitwarden" "✓ Successfully deleted '$item_name'" -u normal
            else
                error_msg=$(echo "$result" | head -1)
                notify-send "Bitwarden" "Failed to delete: $error_msg" -u critical
            fi
        else
            notify-send "Bitwarden" "Deletion cancelled" -u low
        fi
        ;;
esac
#+end_src

** Wallpaper Selector Script (Hyprland)
#+begin_src bash :tangle packages/matugen/.local/bin/select-wallpaper.sh :shebang "#!/usr/bin/env bash"
set -euo pipefail

# Wallpaper directory
WALLPAPER_DIR="$HOME/dotfile/wallpapers"

# Check if directory exists
if [ ! -d "$WALLPAPER_DIR" ]; then
    notify-send "Error" "Wallpaper directory not found: $WALLPAPER_DIR" -u critical
    exit 1
fi

# Get list of wallpapers (excluding README)
wallpapers=$(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) -exec basename {} \; | sort)

# Check if any wallpapers found
if [ -z "$wallpapers" ]; then
    notify-send "Error" "No wallpapers found in $WALLPAPER_DIR" -u critical
    exit 1
fi

# Select wallpaper using fuzzel
selected_wallpaper=$(echo "$wallpapers" | fuzzel --dmenu --placeholder "Select wallpaper...")

# Exit if cancelled
if [ -z "$selected_wallpaper" ]; then
    exit 0
fi

# Select theme mode
mode=$(printf "dark\nlight" | fuzzel --dmenu --placeholder "Select theme...")

# Exit if cancelled
if [ -z "$mode" ]; then
    exit 0
fi

# Full path to selected wallpaper
wallpaper_path="$WALLPAPER_DIR/$selected_wallpaper"

# Generate colors with matugen
notify-send "Matugen" "Generating $mode theme from $selected_wallpaper..." -u low

if matugen image "$wallpaper_path" -m "$mode"; then
    # Set wallpaper with hyprpaper
    hyprctl hyprpaper unload all
    hyprctl hyprpaper preload "$wallpaper_path"
    hyprctl hyprpaper wallpaper ",$wallpaper_path"

    # Reload hyprland
    hyprctl reload

    # Reload waybar and mako explicitly
    pkill waybar || true
    pkill mako || true
    sleep 0.2
    waybar &
    mako &

    # Reload qutebrowser config (for all running instances)
    for socket in ~/.local/share/qutebrowser/runtime/ipc-*; do
        if [ -S "$socket" ]; then
            qutebrowser --target window --untrusted-args ":config-source" 2>/dev/null || true
        fi
    done

    notify-send "Theme Applied" "Wallpaper: $selected_wallpaper\nMode: $mode" -u normal
else
    notify-send "Error" "Failed to generate theme" -u critical
    exit 1
fi
#+end_src

** Wallpaper Selector Script (Sway)
#+begin_src bash :tangle no
set -euo pipefail

# Wallpaper directory
WALLPAPER_DIR="$HOME/dotfile/wallpapers"

# Check if directory exists
if [ ! -d "$WALLPAPER_DIR" ]; then
    notify-send "Error" "Wallpaper directory not found: $WALLPAPER_DIR" -u critical
    exit 1
fi

# Get list of wallpapers (excluding README)
wallpapers=$(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) -exec basename {} \; | sort)

# Check if any wallpapers found
if [ -z "$wallpapers" ]; then
    notify-send "Error" "No wallpapers found in $WALLPAPER_DIR" -u critical
    exit 1
fi

# Select wallpaper using fuzzel
selected_wallpaper=$(echo "$wallpapers" | fuzzel --dmenu --placeholder "Select wallpaper...")

# Exit if cancelled
if [ -z "$selected_wallpaper" ]; then
    exit 0
fi

# Select theme mode
mode=$(printf "dark\nlight" | fuzzel --dmenu --placeholder "Select theme...")

# Exit if cancelled
if [ -z "$mode" ]; then
    exit 0
fi

# Full path to selected wallpaper
wallpaper_path="$WALLPAPER_DIR/$selected_wallpaper"

# Generate colors with matugen
notify-send "Matugen" "Generating $mode theme from $selected_wallpaper..." -u low

if matugen image "$wallpaper_path" -m "$mode"; then
    # Set wallpaper with swaybg
    pkill swaybg || true
    swaybg -i "$wallpaper_path" -m fill &

    # Reload sway
    swaymsg reload

    # Reload waybar and mako explicitly
    pkill waybar || true
    pkill mako || true
    sleep 0.2
    waybar &
    mako &

    # Reload qutebrowser config (for all running instances)
    for socket in ~/.local/share/qutebrowser/runtime/ipc-*; do
        if [ -S "$socket" ]; then
            qutebrowser --target window --untrusted-args ":config-source" 2>/dev/null || true
        fi
    done

    notify-send "Theme Applied" "Wallpaper: $selected_wallpaper\nMode: $mode" -u normal
else
    notify-send "Error" "Failed to generate theme" -u critical
    exit 1
fi
#+end_src
